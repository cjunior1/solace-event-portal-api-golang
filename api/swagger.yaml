openapi: 3.0.1
info:
  title: Event Portal Open API
  description: "REST API Concepts\n\nSolace PubSub+ Event Portal provides REST APIs\
    \ that you can use to manage your data in PubSub+ Cloud. \nThe REST APIs allow\
    \ you to model your event-driven architectures from your own client applications.\n\
    \nThe following document describes the public REST APIs available for use in Event\
    \ Portal 2.0. Objects created in this \nversion will not be available in Event\
    \ Portal 1.0. APIs that display (Beta) in their summary are provided as-is and\
    \ \nare subject to change or removal. They may not be of the quality expected\
    \ for generally available APIs and have no \nguaranteed forward compatibility\
    \ with the generally available version of the API.\n\n"
  version: 2.0.11
servers:
- url: https://api.solace.cloud
  description: Solace PubSub+ Cloud
security:
- APIToken: []
tags:
- name: Application Domains
- name: Applications
- name: Configuration Types
- name: Configurations
- name: Consumers
- name: Custom Attribute Definitions
- name: Enums
- name: Environments
- name: Event API Products
- name: Event APIs
- name: Event Meshes
- name: Events
- name: Schemas
- name: States
- name: Topic Domains
paths:
  /api/v2/architecture/enums:
    get:
      tags:
      - Enums
      summary: Lists enums
      description: Use this API to list enums based on certain criteria.
      operationId: getEnums
      parameters:
      - name: pageSize
        in: query
        description: The number of enums to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: ids
        in: query
        description: The IDs of the enums.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: applicationDomainId
        in: query
        description: The application domain ID of the enums.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: applicationDomainIds
        in: query
        description: Match only enums in the given application domain ids.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: names
        in: query
        description: The names of the enums.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: shared
        in: query
        description: Match only with shared or unshared enums.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: sort
        in: query
        description: "Sort based on the provided parameters. <br> The value can either\
          \ be a standalone field name (`?sort=<field>`) or a field and direction,\
          \ which must be delimited by a colon (`?sort=<field>:<asc|desc>`). If the\
          \ direction is not specified, the default is ascending."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: customAttributes
        in: query
        description: "Returns the entities that match the custom attribute filter.<br>To\
          \ filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`.\
          \ <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`.\
          \ <br>The filter supports the `AND` operator for multiple custom attribute\
          \ definitions (not multiple values for a given definition). Use `;` (`semicolon`)\
          \ to separate multiple queries with `AND` operation. <br>Note: the filter\
          \ only supports custom attribute values containing characters in `[a-zA-Z0-9_\\\
          -\\. ]`."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "searching by single custom attribute definition: `color==red`. <br>Searching\
          \ by single custom attribute name: `color`. <br>Searching by multiple custom\
          \ attribute definition: `color==red;security==high`. <br>Searching by  multiple\
          \ custom attribute name: `color;security`. <br>Searching by  multiple custom\
          \ attribute name `AND` custom attribute definition: `color;security==high`"
      responses:
        "200":
          description: Retrieve a list of enums and the accompanying metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/TopicAddressEnumsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Enums
      summary: Creates an enum object
      description: description
      operationId: createEnum
      requestBody:
        description: Enum object description.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/TopicAddressEnum'
        required: true
      responses:
        "201":
          description: Created an enum. The newly saved enum object is returned in
            the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/TopicAddressEnumResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/events:
    get:
      tags:
      - Events
      summary: Gets the event objects
      description: Use this API to retrieve a list of events that match the given
        parameters.
      operationId: getEvents
      parameters:
      - name: pageSize
        in: query
        description: The number of events to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: name
        in: query
        description: Name of the event to match on.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: shared
        in: query
        description: Match only with shared or unshared events.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: applicationDomainId
        in: query
        description: Match only events in the given application domain.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: applicationDomainIds
        in: query
        description: Match only events in the given application domain ids.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: sort
        in: query
        description: "Sort based on the provided parameters. <br> The value can either\
          \ be a standalone field name (`?sort=<field>`) or a field and direction,\
          \ which must be delimited by a colon (`?sort=<field>:<asc|desc>`). If the\
          \ direction is not specified, the default is ascending."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: customAttributes
        in: query
        description: "Returns the entities that match the custom attribute filter.<br>To\
          \ filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`.\
          \ <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`.\
          \ <br>The filter supports the `AND` operator for multiple custom attribute\
          \ definitions (not multiple values for a given definition). Use `;` (`semicolon`)\
          \ to separate multiple queries with `AND` operation. <br>Note: the filter\
          \ only supports custom attribute values containing characters in `[a-zA-Z0-9_\\\
          -\\. ]`."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "searching by single custom attribute definition: `color==red`. <br>Searching\
          \ by single custom attribute name: `color`. <br>Searching by multiple custom\
          \ attribute definition: `color==red;security==high`. <br>Searching by  multiple\
          \ custom attribute name: `color;security`. <br>Searching by  multiple custom\
          \ attribute name `AND` custom attribute definition: `color;security==high`"
      - name: ids
        in: query
        description: Match only events with the given IDs separated by commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: Retrieve a list of applications and the accompanying metadata.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EventsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Events
      summary: Creates an event object
      description: "Events are the primary building block of an event-driven architecture.\
        \ Applications publish and subscribe to events and events reference schemas.\
        \  In the Event Portal, an event is a type of event as opposed to a specific\
        \ event instance."
      operationId: createEvent
      requestBody:
        description: The event requires a name and an application domain ID.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        "201":
          description: Created an event. The newly saved event object is returned
            in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EventResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/states:
    get:
      tags:
      - States
      summary: Gets the State objects
      description: Use this API to retrieve a list of Lifeycle States that match the
        given parameters.
      operationId: getStates
      responses:
        "200":
          description: Retrieve a list of lifecycle states and the accompanying metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/StatesResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/schemas:
    get:
      tags:
      - Schemas
      summary: Gets the schema objects
      description: Use this API to retrieve a list of schemas that match the given
        parameters.
      operationId: getSchemas
      parameters:
      - name: pageSize
        in: query
        description: The number of schemas to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: name
        in: query
        description: Name of the schema to match on.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: shared
        in: query
        description: Match only with shared or unshared schemas.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: applicationDomainId
        in: query
        description: Match only schemas in the given application domain.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: applicationDomainIds
        in: query
        description: Match only schemas in the given application domain ids.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: ids
        in: query
        description: Match only schemas with the given IDs separated by commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: sort
        in: query
        description: "Sort based on the provided parameters. <br> The value can either\
          \ be a standalone field name (`?sort=<field>`) or a field and direction,\
          \ which must be delimited by a colon (`?sort=<field>:<asc|desc>`). If the\
          \ direction is not specified, the default is ascending."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: customAttributes
        in: query
        description: "Returns the entities that match the custom attribute filter.<br>To\
          \ filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`.\
          \ <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`.\
          \ <br>The filter supports the `AND` operator for multiple custom attribute\
          \ definitions (not multiple values for a given definition). Use `;` (`semicolon`)\
          \ to separate multiple queries with `AND` operation. <br>Note: the filter\
          \ only supports custom attribute values containing characters in `[a-zA-Z0-9_\\\
          -\\. ]`."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "searching by single custom attribute definition: `color==red`. <br>Searching\
          \ by single custom attribute name: `color`. <br>Searching by multiple custom\
          \ attribute definition: `color==red;security==high`. <br>Searching by  multiple\
          \ custom attribute name: `color;security`. <br>Searching by  multiple custom\
          \ attribute name `AND` custom attribute definition: `color;security==high`"
      responses:
        "200":
          description: Retrieve a list of schemas and the accompanying metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SchemasResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Schemas
      summary: Creates a schema object
      description: "To model your event-driven architecture, schemas are a fundamental\
        \ building block for modelling the payloads of the events flowing through\
        \ your system. Use this API to create schemas that can later be referenced\
        \ by events."
      operationId: createSchema
      requestBody:
        description: "The schema requires a name, an application domain, a schema\
          \ type and a content type."
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/SchemaObject'
        required: true
      responses:
        "201":
          description: Created a schema. The newly saved schema object is returned
            in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SchemaResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventApis:
    get:
      tags:
      - Event APIs
      summary: Retrieves a list of event APIs
      description: Use this API to retrieve a list of event APIs that match the given
        parameters.
      operationId: getEventApis
      parameters:
      - name: pageSize
        in: query
        description: The number of event APIs to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: name
        in: query
        description: Name of the event API to match on.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ids
        in: query
        description: Match only event APIs with the given IDs separated by commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: applicationDomainId
        in: query
        description: Match only event APIs in the given application domain.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: applicationDomainIds
        in: query
        description: Match only event APIs in the given application domains.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: eventApiVersionIds
        in: query
        description: Match only event APIs in the given event API version ids.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: availableWithinApplicationDomainIds
        in: query
        description: Additionally match any shared event APIs in any application domain.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: shared
        in: query
        description: Match only with shared or unshared event APIs.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: brokerType
        in: query
        description: Match only event APIs with the given broker type.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        description: "Sort based on the provided parameters. <br> The value can either\
          \ be a standalone field name (`?sort=<field>`) or a field and direction,\
          \ which must be delimited by a colon (`?sort=<field>:<asc|desc>`). If the\
          \ direction is not specified, the default is ascending."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: customAttributes
        in: query
        description: "Returns the entities that match the custom attribute filter.<br>To\
          \ filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`.\
          \ <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`.\
          \ <br>The filter supports the `AND` operator for multiple custom attribute\
          \ definitions (not multiple values for a given definition). Use `;` (`semicolon`)\
          \ to separate multiple queries with `AND` operation. <br>Note: the filter\
          \ only supports custom attribute values containing characters in `[a-zA-Z0-9_\\\
          -\\. ]`."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "searching by single custom attribute definition: `color==red`. <br>Searching\
          \ by single custom attribute name: `color`. <br>Searching by multiple custom\
          \ attribute definition: `color==red;security==high`. <br>Searching by  multiple\
          \ custom attribute name: `color;security`. <br>Searching by  multiple custom\
          \ attribute name `AND` custom attribute definition: `color;security==high`"
      responses:
        "200":
          description: The list of event APIs and the accompanying metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApisResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Event APIs
      summary: Creates an event API
      description: Use this API to create an event API.
      operationId: createEventApi
      requestBody:
        description: The event API
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventApi'
        required: true
      responses:
        "201":
          description: Created an event API. The newly saved event API is returned
            in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/consumers:
    get:
      tags:
      - Consumers
      summary: Gets the consumer objects
      description: Use this API to retrieve a list of consumers that match the given
        parameters.
      operationId: getConsumers
      parameters:
      - name: pageSize
        in: query
        description: The number of consumers to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: applicationVersionIds
        in: query
        description: "Match only consumers with the given application version IDs,\
          \ separated by commas."
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: ids
        in: query
        description: Match only consumers with the given IDs separated by commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: Retrieve a list of consumers and the accompanying metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ConsumersResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Consumers
      summary: Creates a consumer object
      description: 'Use this API to create a consumer. '
      operationId: createConsumer
      requestBody:
        description: The consumer object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consumer'
        required: true
      responses:
        "201":
          description: Created a consumer. Returns the newly saved consumer object
            in the response body.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConsumerResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/enums/{id}:
    get:
      tags:
      - Enums
      summary: Retrieves an enum object
      description: Use this API to retrieve a single enum by its ID.
      operationId: getEnum
      parameters:
      - name: id
        in: path
        description: The ID of the enum object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The enum object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/TopicAddressEnumResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Enums
      summary: Deletes an enum
      description: Use this API to delete an enum. The enum must not have any versions
        or else it cannot be deleted.
      operationId: deleteEnum
      parameters:
      - name: id
        in: path
        description: The ID of the enum.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned if the delete was successful.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: If the enum did not exist.
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Enums
      summary: Updates an enum object
      description: description
      operationId: updateEnum
      parameters:
      - name: id
        in: path
        description: The ID of the enum.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Enum updates.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/TopicAddressEnum'
        required: true
      responses:
        "200":
          description: Updated an enum. The newly saved enum object is returned in
            the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/TopicAddressEnumResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventMeshes:
    get:
      tags:
      - Event Meshes
      summary: Gets the event mesh objects
      description: Use this API to retrieve a list of event meshes that match the
        given parameters.
      operationId: getEventMeshes
      parameters:
      - name: pageSize
        in: query
        description: The number of event meshes to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: name
        in: query
        description: Name of the event mesh to match on.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: environmentId
        in: query
        description: Match only event meshes in the given environment
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: The list of event meshes and the accompanying metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EventMeshesResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Event Meshes
      summary: Creates an event mesh object
      description: Creates an event mesh object.
      operationId: createEventMesh
      requestBody:
        description: Event mesh.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/EventMesh'
        required: true
      responses:
        "201":
          description: Created an event mesh. The newly saved event object is returned
            in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EventMeshResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/events/{id}:
    get:
      tags:
      - Events
      summary: Retrieves an event object
      description: Use this API to retrieve a single event by its ID.
      operationId: getEvent
      parameters:
      - name: id
        in: path
        description: The ID of the event object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The event object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EventResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Events
      summary: Deletes an event object
      description: Use this API to delete an event.
      operationId: deleteEvent
      parameters:
      - name: id
        in: path
        description: The ID of the event object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Events
      summary: Updates an event object
      description: Use this API to update an event. You only need to specify the fields
        that need to be updated.
      operationId: updateEvent
      parameters:
      - name: id
        in: path
        description: The ID of the event object to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The event object.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        "200":
          description: The updated event object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EventResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/topicDomains:
    get:
      tags:
      - Topic Domains
      summary: Gets the topic domain objects
      description: Use this API to retrieve a list of topic domains that match the
        given parameters.
      operationId: getTopicDomains
      parameters:
      - name: pageSize
        in: query
        description: The number of topic domains to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: ids
        in: query
        description: Match only topic domains with the given IDs separated by commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: brokerType
        in: query
        description: Match only topic domains with the given brokerType.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: applicationDomainIds
        in: query
        description: Match only topic domains with the given application domain ids
          separated by commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: applicationDomainId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Retrieve a list of topic domains and the accompanying metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/TopicDomainsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Topic Domains
      summary: Creates a topic domain object
      description: Topic Domains govern the format of topic addresses within an application
        domain
      operationId: createTopicDomain
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/TopicDomain'
        required: true
      responses:
        "201":
          description: Created a topic domain. Returns the newly saved topic domain
            object in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/TopicDomainResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/enumVersions:
    get:
      tags:
      - Enums
      summary: Gets the enumeration version objects
      description: Use this API to retrieve a list of enumeration versions that match
        the given parameters.
      operationId: getEnumVersions
      parameters:
      - name: pageSize
        in: query
        description: The number of enumerations to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: enumIds
        in: query
        description: "Match only enumeration versions of these enum IDs, separated\
          \ by commas."
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: ids
        in: query
        description: "Match only enumeration versions with the given IDs, separated\
          \ by commas."
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: customAttributes
        in: query
        description: "Returns the entities that match the custom attribute filter.<br>To\
          \ filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`.\
          \ <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`.\
          \ <br>The filter supports the `AND` operator for multiple custom attribute\
          \ definitions (not multiple values for a given definition). Use `;` (`semicolon`)\
          \ to separate multiple queries with `AND` operation. <br>Note: the filter\
          \ only supports custom attribute values containing characters in `[a-zA-Z0-9_\\\
          -\\. ]`."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "searching by single custom attribute definition: `color==red`. <br>Searching\
          \ by single custom attribute name: `color`. <br>Searching by multiple custom\
          \ attribute definition: `color==red;security==high`. <br>Searching by  multiple\
          \ custom attribute name: `color;security`. <br>Searching by  multiple custom\
          \ attribute name `AND` custom attribute definition: `color;security==high`"
      responses:
        "200":
          description: Retrieve a list of enumeration versions and the accompanying
            metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/TopicAddressEnumVersionsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Enums
      summary: Creates an enum version object
      description: description
      operationId: createEnumVersion
      requestBody:
        description: Enum object description with its values.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/TopicAddressEnumVersion'
        required: true
      responses:
        "201":
          description: Created an enum version and its values. The newly saved enum
            version object is returned in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/TopicAddressEnumVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/applications:
    get:
      tags:
      - Applications
      summary: Gets the application objects
      description: Use this API to retrieve a list of applications that match the
        given parameters.
      operationId: getApplications
      parameters:
      - name: pageSize
        in: query
        description: The number of applications to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: name
        in: query
        description: Name of the application to match on.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: applicationDomainId
        in: query
        description: Match only applications in the given application domain.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ids
        in: query
        description: Match only applications with the given IDs separated by commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: sort
        in: query
        description: "Sort based on the provided parameters. <br> The value can either\
          \ be a standalone field name (`?sort=<field>`) or a field and direction,\
          \ which must be delimited by a colon (`?sort=<field>:<asc|desc>`). If the\
          \ direction is not specified, the default is ascending."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: customAttributes
        in: query
        description: "Returns the entities that match the custom attribute filter.<br>To\
          \ filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`.\
          \ <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`.\
          \ <br>The filter supports the `AND` operator for multiple custom attribute\
          \ definitions (not multiple values for a given definition). Use `;` (`semicolon`)\
          \ to separate multiple queries with `AND` operation. <br>Note: the filter\
          \ only supports custom attribute values containing characters in `[a-zA-Z0-9_\\\
          -\\. ]`."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "searching by single custom attribute definition: `color==red`. <br>Searching\
          \ by single custom attribute name: `color`. <br>Searching by multiple custom\
          \ attribute definition: `color==red;security==high`. <br>Searching by  multiple\
          \ custom attribute name: `color;security`. <br>Searching by  multiple custom\
          \ attribute name `AND` custom attribute definition: `color;security==high`"
      - name: applicationType
        in: query
        description: Match only applications with the given applicationType.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Retrieve a list of applications and the accompanying metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApplicationsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Applications
      summary: Creates an application object
      description: "To model your event-driven architecture, applications are a fundamental\
        \ building block for modelling the producers and consumers of events. Use\
        \ this API to create applications and model the events they produce and consume."
      operationId: createApplication
      requestBody:
        description: Applications have a name and live within an application domain.
          Events can be added to the application as produced or consumed.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/Application'
        required: true
      responses:
        "201":
          description: Created an application. Returns the newly saved application
            object in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApplicationResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/schemas/{id}:
    get:
      tags:
      - Schemas
      summary: Retrieves a schema object
      description: Use this API to retrieve a single schema by its ID.
      operationId: getSchema
      parameters:
      - name: id
        in: path
        description: The ID of the schema object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The schema object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SchemaResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Schemas
      summary: Deletes a schema object
      description: Use this API to delete a schema. The schema must not be in use
        by any events else it cannot be deleted.
      operationId: deleteSchema
      parameters:
      - name: id
        in: path
        description: The ID of the schema object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Schemas
      summary: Updates a schema object
      description: Update a schema
      operationId: updateSchema
      parameters:
      - name: id
        in: path
        description: The ID of the schema object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: "The schema requires a name, an application domain, a schema\
          \ type and a content type."
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/SchemaObject'
        required: true
      responses:
        "200":
          description: Updated a schema. The newly saved schema object is returned
            in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SchemaResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/environments:
    get:
      tags:
      - Environments
      summary: Gets the environment objects
      description: Use this API to list all environments.
      operationId: getEnvironments
      parameters:
      - name: pageSize
        in: query
        description: The number of events to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: sort
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: like
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Retrieve a list of environments and the accompanying metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EnvironmentsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventVersions:
    get:
      tags:
      - Events
      summary: Gets event version objects
      description: Use this API to retrieve a list of event versions that match the
        given parameters.
      operationId: getEventVersions
      parameters:
      - name: pageSize
        in: query
        description: The number of event to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: eventIds
        in: query
        description: "Match only event versions of these event IDs, separated by commas."
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: ids
        in: query
        description: "Match only event versions with the given IDs, separated by commas."
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: messagingServiceIds
        in: query
        description: "Match only event versions with the given messaging service IDs,\
          \ separated by commas."
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: include
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: customAttributes
        in: query
        description: "Returns the entities that match the custom attribute filter.<br>To\
          \ filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`.\
          \ <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`.\
          \ <br>The filter supports the `AND` operator for multiple custom attribute\
          \ definitions (not multiple values for a given definition). Use `;` (`semicolon`)\
          \ to separate multiple queries with `AND` operation. <br>Note: the filter\
          \ only supports custom attribute values containing characters in `[a-zA-Z0-9_\\\
          -\\. ]`."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "searching by single custom attribute definition: `color==red`. <br>Searching\
          \ by single custom attribute name: `color`. <br>Searching by multiple custom\
          \ attribute definition: `color==red;security==high`. <br>Searching by  multiple\
          \ custom attribute name: `color;security`. <br>Searching by  multiple custom\
          \ attribute name `AND` custom attribute definition: `color;security==high`"
      responses:
        "200":
          description: Retrieve a list of event versions and the accompanying metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EventVersionsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Events
      summary: Creates an event version object
      description: Creates an event version object
      operationId: createEventVersion
      requestBody:
        description: App version request body description
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/EventVersion'
        required: true
      responses:
        "201":
          description: Created an event version. Returns the newly saved event version
            object in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EventVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/schemaVersions:
    get:
      tags:
      - Schemas
      summary: Retrieves a list of schema version objects
      description: Use this API to retrieve a list of schema versions that match the
        given parameters.
      operationId: getSchemaVersions
      parameters:
      - name: pageSize
        in: query
        description: The number of schemas to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: schemaIds
        in: query
        description: "Match only schema versions of these schema IDs, separated by\
          \ commas."
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: ids
        in: query
        description: "Match only schema versions with the given IDs, separated by\
          \ commas."
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: customAttributes
        in: query
        description: "Returns the entities that match the custom attribute filter.<br>To\
          \ filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`.\
          \ <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`.\
          \ <br>The filter supports the `AND` operator for multiple custom attribute\
          \ definitions (not multiple values for a given definition). Use `;` (`semicolon`)\
          \ to separate multiple queries with `AND` operation. <br>Note: the filter\
          \ only supports custom attribute values containing characters in `[a-zA-Z0-9_\\\
          -\\. ]`."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "searching by single custom attribute definition: `color==red`. <br>Searching\
          \ by single custom attribute name: `color`. <br>Searching by multiple custom\
          \ attribute definition: `color==red;security==high`. <br>Searching by  multiple\
          \ custom attribute name: `color;security`. <br>Searching by  multiple custom\
          \ attribute name `AND` custom attribute definition: `color;security==high`"
      - name: include
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Retrieve a list of schema versions and the accompanying metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SchemaVersionsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Schemas
      summary: Creates a schema version object
      description: Creates a schema version object
      operationId: createSchemaVersion
      requestBody:
        description: schema version details
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/SchemaVersion'
        required: true
      responses:
        "201":
          description: Created a schema version. The newly saved schema version object
            is returned in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SchemaVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventApis/{id}:
    get:
      tags:
      - Event APIs
      summary: Retrieves an event API
      description: Use this API to retrieve a single event API by its ID.
      operationId: getEventApi
      parameters:
      - name: id
        in: path
        description: The ID of the event API.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The event API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Event APIs
      summary: Deletes an event API
      description: Use this API to delete an event API.
      operationId: deleteEventApi
      parameters:
      - name: id
        in: path
        description: The ID of the event API.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Event APIs
      summary: Updates an event API
      description: Use this API to update an event API. You only need to specify the
        fields that need to be updated.
      operationId: updateEventApi
      parameters:
      - name: id
        in: path
        description: The ID of the event API to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The event API
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventApi'
        required: true
      responses:
        "200":
          description: The updated event API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/consumers/{id}:
    get:
      tags:
      - Consumers
      summary: Retrieves a consumer object
      description: Use this API to retrieve a single consumer by its ID.
      operationId: getConsumer
      parameters:
      - name: id
        in: path
        description: The ID of the consumer object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The consumer object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ConsumerResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Consumers
      summary: Deletes a consumer object
      description: Use this API to delete a consumer.
      operationId: deleteConsumer
      parameters:
      - name: id
        in: path
        description: The ID of the consumer
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Consumers
      summary: Update a consumer object
      description: 'Use this API to update a consumer. '
      operationId: updateConsumer
      parameters:
      - name: id
        in: path
        description: The ID of the consumer
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The consumer object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consumer'
        required: true
      responses:
        "200":
          description: Updated a consumer. Returns the newly saved consumer object
            in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ConsumerResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/configurations:
    get:
      tags:
      - Configurations
      summary: (Beta) Gets the configuration objects
      description: Use this API to retrieve a list of configurations that match the
        given parameters.
      operationId: getConfigurations
      parameters:
      - name: pageSize
        in: query
        description: The number of configurations to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: messagingServiceIds
        in: query
        description: Match only configurations with the given messaging service IDs
          separated by commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: ids
        in: query
        description: Match only configurations with the given IDs separated by commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: configurationTypeIds
        in: query
        description: Match only configurations with the given configuration type IDs
          separated by commas.<br>Refer <a href="#/Configuration%20Types/getConfigurationTypes">here</a>
          for details on configuration types.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: entityTypes
        in: query
        description: Match only configurations with the given entity type values separated
          by commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: entityIds
        in: query
        description: Match only configurations with the given entity IDs separated
          by commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: sort
        in: query
        description: "Sort based on the provided parameters. <br> The value can either\
          \ be a standalone field name (`?sort=<field>`) or a field and direction,\
          \ which must be delimited by a colon (`?sort=<field>:<asc|desc>`). If the\
          \ direction is not specified, the default is ascending."
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Retrieve a list of configurations and the accompanying metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ConfigurationsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventApiVersions:
    get:
      tags:
      - Event APIs
      summary: Retrieves a list of event API versions
      description: Use this API to retrieve a list of event API versions that match
        the given parameters.
      operationId: getEventApiVersions
      parameters:
      - name: pageSize
        in: query
        description: The number of results to return in one page of results.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get results from based on the page size.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: eventApiIds
        in: query
        description: "Match only event API versions of these event API IDs, separated\
          \ by commas."
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: ids
        in: query
        description: "Match event API versions with the given IDs, separated by commas."
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: include
        in: query
        description: A list of additional entities to include in the response.
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: parent
      - name: stateId
        in: query
        description: Match event API versions with the given state ID.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: customAttributes
        in: query
        description: "Returns the entities that match the custom attribute filter.<br>To\
          \ filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`.\
          \ <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`.\
          \ <br>The filter supports the `AND` operator for multiple custom attribute\
          \ definitions (not multiple values for a given definition). Use `;` (`semicolon`)\
          \ to separate multiple queries with `AND` operation. <br>Note: the filter\
          \ only supports custom attribute values containing characters in `[a-zA-Z0-9_\\\
          -\\. ]`."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "searching by single custom attribute definition: `color==red`. <br>Searching\
          \ by single custom attribute name: `color`. <br>Searching by multiple custom\
          \ attribute definition: `color==red;security==high`. <br>Searching by  multiple\
          \ custom attribute name: `color;security`. <br>Searching by  multiple custom\
          \ attribute name `AND` custom attribute definition: `color;security==high`"
      responses:
        "200":
          description: Retrieve a list of event API versions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiVersionsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Event APIs
      summary: Creates an event API version
      description: Use this API to create an event API version.
      operationId: createEventApiVersion
      requestBody:
        description: Event API version
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventApiVersion'
        required: true
      responses:
        "201":
          description: Created an event API version. Returns the newly saved event
            API version in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventApiProducts:
    get:
      tags:
      - Event API Products
      summary: Retrieves a list of event API products
      description: Use this API to retrieve a list of event API products that match
        the given parameters.
      operationId: getEventApiProducts
      parameters:
      - name: pageSize
        in: query
        description: The number of event API products to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: brokerType
        in: query
        description: Match only event API products with the given broken type.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: Name of the event API product to match on.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ids
        in: query
        description: Match only event API products with the given IDs separated by
          commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: applicationDomainId
        in: query
        description: Match only event API products in the given application domain.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: applicationDomainIds
        in: query
        description: Match only event API products in the given application domains.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: shared
        in: query
        description: Match only with shared or unshared event API products.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: sort
        in: query
        description: "Sort based on the provided parameters. <br> The value can either\
          \ be a standalone field name (`?sort=<field>`) or a field and direction,\
          \ which must be delimited by a colon (`?sort=<field>:<asc|desc>`). If the\
          \ direction is not specified, the default is ascending."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: customAttributes
        in: query
        description: "Returns the entities that match the custom attribute filter.<br>To\
          \ filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`.\
          \ <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`.\
          \ <br>The filter supports the `AND` operator for multiple custom attribute\
          \ definitions (not multiple values for a given definition). Use `;` (`semicolon`)\
          \ to separate multiple queries with `AND` operation. <br>Note: the filter\
          \ only supports custom attribute values containing characters in `[a-zA-Z0-9_\\\
          -\\. ]`."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "searching by single custom attribute definition: `color==red`. <br>Searching\
          \ by single custom attribute name: `color`. <br>Searching by multiple custom\
          \ attribute definition: `color==red;security==high`. <br>Searching by  multiple\
          \ custom attribute name: `color;security`. <br>Searching by  multiple custom\
          \ attribute name `AND` custom attribute definition: `color;security==high`"
      responses:
        "200":
          description: The list of event API products and the accompanying metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiProductsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Event API Products
      summary: Creates an event API product
      description: Use this API to create an event API product.
      operationId: createEventApiProduct
      requestBody:
        description: The event API product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventApiProduct'
        required: true
      responses:
        "201":
          description: Created an event API product. The newly saved event API product
            is returned in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiProductResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventMeshes/{id}:
    get:
      tags:
      - Event Meshes
      summary: Retrieves an event mesh object
      description: Retrieves a single event mesh by its ID.
      operationId: getEventMesh
      parameters:
      - name: id
        in: path
        description: The ID of the event mesh object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The event mesh object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EventMeshResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Event Meshes
      summary: Deletes an event mesh object
      description: Use this API to delete an event mesh.
      operationId: deleteEventMesh
      parameters:
      - name: id
        in: path
        description: The ID of the event mesh object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Event Meshes
      summary: Updates an event mesh object
      description: Use this API to update an event mesh. You only need to specify
        the fields that need to be updated.
      operationId: updateEventMesh
      parameters:
      - name: id
        in: path
        description: The ID of the event mesh object to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The event mesh object.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/EventMesh'
        required: true
      responses:
        "200":
          description: The updated event mesh object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EventMeshResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/messagingServices:
    get:
      tags:
      - Messaging Services
      summary: (Beta) Retrieves a list of messaging services
      description: Use this API to retrieve a list of messaging services that match
        the given parameters.
      operationId: getMessagingServices
      parameters:
      - name: pageSize
        in: query
        description: The number of messaging services to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: sort
        in: query
        description: "Sort based on the provided parameters. <br> The value can either\
          \ be a standalone field name (`?sort=<field>`) or a field and direction,\
          \ which must be delimited by a colon (`?sort=<field>:<asc|desc>`). If the\
          \ direction is not specified, the default is ascending."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ids
        in: query
        description: The IDs of the messaging services.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: messagingServiceType
        in: query
        description: Match only messaging services of the given type
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: runtimeAgentId
        in: query
        description: Match only messaging services in the given runtimeAgentId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: eventMeshId
        in: query
        description: Match only messaging services in the given eventMeshId
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: eventManagementAgentId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: The list of messaging services and the accompanying metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagingServicesResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Messaging Services
      summary: (Beta) Creates a messaging service object
      description: Use this API to create a messaging service object.
      operationId: createMessagingService
      requestBody:
        description: The messaging service object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingService'
        required: true
      responses:
        "201":
          description: Created a messaging service. The newly saved object is returned
            in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagingServiceResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/enumVersions/{id}:
    delete:
      tags:
      - Enums
      summary: Deletes an enum version
      description: Use this API to delete an enum version. The version must not be
        in use by any events else it cannot be deleted. This also deletes the version's
        values.
      operationId: deleteEnumVersion
      parameters:
      - name: id
        in: path
        description: The ID of the enum version object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned if the delete was successful.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: If the enum version did not exist.
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Enums
      summary: Updates an enum version object
      description: Use this API to update an enum version. You only need to specify
        the fields that need to be updated.
      operationId: updateEnumVersion
      parameters:
      - name: id
        in: path
        description: The ID of the enum version object to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The enum version object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicAddressEnumVersion'
        required: true
      responses:
        "200":
          description: The updated application version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/TopicAddressEnumVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/applications/{id}:
    get:
      tags:
      - Applications
      summary: Retrieves an application object
      description: Use this API to retrieve a single application by its ID.
      operationId: getApplication
      parameters:
      - name: id
        in: path
        description: The ID of the application object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The application object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApplicationResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Applications
      summary: Deletes an application object
      description: Use this API to delete an application.
      operationId: deleteApplication
      parameters:
      - name: id
        in: path
        description: The ID of the application
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Applications
      summary: Updates an application object
      description: Use this API to update an application. You only need to specify
        the fields that need to be updated.
      operationId: updateApplication
      parameters:
      - name: id
        in: path
        description: The ID of the application object to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The application object.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/Application'
        required: true
      responses:
        "200":
          description: The updated application object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApplicationResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/topicDomains/{id}:
    get:
      tags:
      - Topic Domains
      summary: Retrieves a topic domain object
      description: Use this API to retrieve a single topic domain by its ID.
      operationId: getTopicDomain
      parameters:
      - name: id
        in: path
        description: The ID of the topic domain object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The topic domain object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/TopicDomainResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Topic Domains
      summary: Deletes a topic domain object
      description: Use this API to delete a topic domain.
      operationId: deleteTopicDomain
      parameters:
      - name: id
        in: path
        description: The ID of the topic domain
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TopicDomainResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/environments/{id}:
    get:
      tags:
      - Environments
      summary: Retrieves an environment object
      description: Use this API to retrieve a single environment by its ID.
      operationId: getEnvironment
      parameters:
      - name: id
        in: path
        description: The ID of the environment object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The environment object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EnvironmentResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/applicationDomains:
    get:
      tags:
      - Application Domains
      summary: Gets the application domain objects
      description: Use this API to retrieve a list of application domains that match
        the given parameters.
      operationId: getApplicationDomains
      parameters:
      - name: pageSize
        in: query
        description: The number of application domains to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: name
        in: query
        description: Name to be used to match the application domain.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ids
        in: query
        description: Match only application domains with the given IDs separated by
          commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: include
        in: query
        description: "Specify extra data to be included, options are: stats"
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: Retrieve a list of application domains and the accompanying
            metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApplicationDomainsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Application Domains
      summary: Creates an application domain object
      description: "To help keep your event-driven architecture organized, use application\
        \ domains to create namespaces for your applications, events and schemas."
      operationId: createApplicationDomain
      requestBody:
        description: Application domains have a name and topic domain.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/ApplicationDomain'
        required: true
      responses:
        "201":
          description: Created. The newly saved application domain object is returned
            in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApplicationDomainResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventVersions/{id}:
    get:
      tags:
      - Events
      summary: Retrieves an event version object
      description: Use this API to retrieve a single event version by its ID.
      operationId: getEventVersion
      parameters:
      - name: id
        in: path
        description: The ID of the event version object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: include
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: The event version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EventVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Events
      summary: Deletes an event version object
      description: Use this API to delete an event version.
      operationId: deleteEventVersion
      parameters:
      - name: id
        in: path
        description: The ID of the event version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Events
      summary: Updates an event version object
      description: Use this API to update an event version. You only need to specify
        the fields that need to be updated.
      operationId: updateEventVersion
      parameters:
      - name: id
        in: path
        description: The ID of the event version object to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The event version object.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/EventVersion'
        required: true
      responses:
        "200":
          description: The updated event version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EventVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/configurationTypes:
    get:
      tags:
      - Configuration Types
      summary: (Beta) Gets the configuration type objects
      description: Use this API to retrieve a list of configuration types that match
        the given parameters.
      operationId: getConfigurationTypes
      parameters:
      - name: pageSize
        in: query
        description: The number of configuration types to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: ids
        in: query
        description: Match only configuration types with the given IDs separated by
          commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: names
        in: query
        description: Match only configuration types with the given names separated
          by commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: associatedEntityTypes
        in: query
        description: Match only configuration types with the given associated entity
          type values separated by commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: brokerType
        in: query
        description: Match only configuration types with the given broker type.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        description: "Sort based on the provided parameters. <br> The value can either\
          \ be a standalone field name (`?sort=<field>`) or a field and direction,\
          \ which must be delimited by a colon (`?sort=<field>:<asc|desc>`). If the\
          \ direction is not specified, the default is ascending."
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Retrieve a list of configuration types and the accompanying
            metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ConfigurationTypesResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/applicationVersions:
    get:
      tags:
      - Applications
      summary: Gets the application version objects
      description: Use this API to retrieve a list of application versions that match
        the given parameters.
      operationId: getApplicationVersions
      parameters:
      - name: pageSize
        in: query
        description: The number of application versions to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: applicationIds
        in: query
        description: "Match only application versions of these application IDs, separated\
          \ by commas."
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: ids
        in: query
        description: "Match only application versions with the given IDs, separated\
          \ by commas."
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: messagingServiceIds
        in: query
        description: "Match only application versions with the given messaging service\
          \ IDs, separated by commas."
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: customAttributes
        in: query
        description: "Returns the entities that match the custom attribute filter.<br>To\
          \ filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`.\
          \ <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`.\
          \ <br>The filter supports the `AND` operator for multiple custom attribute\
          \ definitions (not multiple values for a given definition). Use `;` (`semicolon`)\
          \ to separate multiple queries with `AND` operation. <br>Note: the filter\
          \ only supports custom attribute values containing characters in `[a-zA-Z0-9_\\\
          -\\. ]`."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "searching by single custom attribute definition: `color==red`. <br>Searching\
          \ by single custom attribute name: `color`. <br>Searching by multiple custom\
          \ attribute definition: `color==red;security==high`. <br>Searching by  multiple\
          \ custom attribute name: `color;security`. <br>Searching by  multiple custom\
          \ attribute name `AND` custom attribute definition: `color;security==high`"
      responses:
        "200":
          description: Retrieve a list of application versions and the accompanying
            metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApplicationVersionsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Applications
      summary: Creates an application version object
      description: Creates an application version object
      operationId: createApplicationVersion
      requestBody:
        description: App version request body description
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/ApplicationVersion'
        required: true
      responses:
        "201":
          description: Created an application version. Returns the newly saved application
            version object in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApplicationVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/schemaVersions/{id}:
    delete:
      tags:
      - Schemas
      summary: Deletes a schema version object
      description: Use this API to delete a schema version.
      operationId: deleteSchemaVersion
      parameters:
      - name: id
        in: path
        description: The ID of the schema version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Schemas
      summary: Updates a schema version object
      description: Use this API to update a schema version.
      operationId: updateSchemaVersion
      parameters:
      - name: id
        in: path
        description: The ID of the schema version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/SchemaVersion'
        required: true
      responses:
        "200":
          description: The schema version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SchemaVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/configurations/{id}:
    get:
      tags:
      - Configurations
      summary: (Beta) Retrieves a configuration object
      description: Use this API to retrieve a single configuration by its ID.
      operationId: getConfiguration
      parameters:
      - name: id
        in: path
        description: The ID of the configuration object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The configuration object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ConfigurationResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventManagementAgents:
    get:
      tags:
      - Event Management Agents
      summary: (Beta) Retrieves a list of EMAs
      description: Use this API to retrieve a list of EMAs that match the given parameters.
      operationId: getEventManagementAgents
      parameters:
      - name: pageSize
        in: query
        description: The number of EMAs to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: sort
        in: query
        description: "Sort based on the provided parameters. <br> The value can either\
          \ be a standalone field name (`?sort=<field>`) or a field and direction,\
          \ which must be delimited by a colon (`?sort=<field>:<asc|desc>`). If the\
          \ direction is not specified, the default is ascending."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ids
        in: query
        description: The IDs of the EMAs.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: createdBy
        in: query
        description: Match only EMAs created by this user
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: eventManagementAgentRegionId
        in: query
        description: Match only EMAs in the given EMA-Region
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: include
        in: query
        description: "Specify extra data to be included, options are: referencedByMessagingServiceIds"
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: The list of EMAs and the accompanying metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventManagementAgentsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Event Management Agents
      summary: (Beta) Creates an EMA object
      description: Use this API to create an EMA object.
      operationId: createEventManagementAgent
      requestBody:
        description: The EMA object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventManagementAgent'
        required: true
      responses:
        "201":
          description: Created an EMA. The newly saved object is returned in the response
            body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventManagementAgentResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventApiProducts/{id}:
    get:
      tags:
      - Event API Products
      summary: Retrieves an event API product
      description: Use this API to retrieve a single event API product by its ID.
      operationId: getEventApiProduct
      parameters:
      - name: id
        in: path
        description: The ID of the event API product.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The event API product.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiProductResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Event API Products
      summary: Deletes an event API product
      description: Use this API to delete an event API product.
      operationId: deleteEventApiProduct
      parameters:
      - name: id
        in: path
        description: The ID of the event API product.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Event API Products
      summary: Updates an event API product
      description: Use this API to update an event API product. You only need to specify
        the fields that need to be updated.
      operationId: updateEventApiProduct
      parameters:
      - name: id
        in: path
        description: The ID of the event API product to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The event API product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventApiProduct'
        required: true
      responses:
        "200":
          description: The updated event API product.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiProductResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/messagingServiceScans:
    get:
      tags:
      - Messaging Service Scans
      summary: (Beta) Retrieves a list of messaging service scans
      description: Use this API to retrieve a list of messaging service scans that
        match the given parameters.
      operationId: getMessagingServiceScans
      parameters:
      - name: pageSize
        in: query
        description: The number of messaging service scans to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: sort
        in: query
        description: "Sort based on the provided parameters. <br> The value can either\
          \ be a standalone field name (`?sort=<field>`) or a field and direction,\
          \ which must be delimited by a colon (`?sort=<field>:<asc|desc>`). If the\
          \ direction is not specified, the default is ascending."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ids
        in: query
        description: The IDs of the messaging service scans.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: messagingServiceId
        in: query
        description: Match only messaging service scans in the given messagingService
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: eventMeshId
        in: query
        description: Match only messaging service scans in the given eventMeshId
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: The list of messaging service scans and the accompanying metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagingServiceScansResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/messagingServices/{id}:
    get:
      tags:
      - Messaging Services
      summary: (Beta) Retrieves a messaging service object
      description: Use this API to retrieve a single messaging service by its ID.
      operationId: getMessagingService
      parameters:
      - name: id
        in: path
        description: The ID of the messaging service object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The messaging service object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagingServiceResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Messaging Services
      summary: (Beta) Deletes a messaging service object
      description: Use this API to delete a messaging service.
      operationId: deleteMessagingService
      parameters:
      - name: id
        in: path
        description: The ID of the messaging service object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Messaging Services
      summary: (Beta) Updates a messaging service object
      description: "Use this API to update a messaging service. You only need to specify\
        \ the fields that need to be updated. However, if you want to update anything\
        \ under subObjects (i.e. anything inside messagingServiceConnections object),\
        \ you need to provide the original messagingServiceConnections with the updated\
        \ fields instead of just providing the changed fields."
      operationId: updateMessagingService
      parameters:
      - name: id
        in: path
        description: The ID of the messaging service object to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The messaging service object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingService'
        required: true
      responses:
        "200":
          description: The updated messaging service object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagingServiceResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventApiProductVersions:
    get:
      tags:
      - Event API Products
      summary: (Beta) Retrieves a list of event API product versions
      description: Use this API to retrieve a list of event API product versions that
        match the given parameters.
      operationId: getEventApiProductVersions
      parameters:
      - name: pageSize
        in: query
        description: The number of results to return in one page of results.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get results from based on the page size.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: eventApiProductIds
        in: query
        description: "Match only event API product versions of these event API product\
          \ IDs, separated by commas."
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: ids
        in: query
        description: "Match event API product versions with the given IDs, separated\
          \ by commas."
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: include
        in: query
        description: A list of additional entities to include in the response.
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: parent
      - name: stateId
        in: query
        description: Match event API product versions with the given state ID.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: messagingServiceId
        in: query
        description: Match event API product versions with the given messagingServiceId.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: clientAppId
        in: query
        description: Match event API product versions with the given clientAppId.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: shared
        in: query
        description: Match event API product versions with the parent objects shared
          setting.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: latest
        in: query
        description: Only return the latest version of event API products.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: customAttributes
        in: query
        description: "Returns the entities that match the custom attribute filter.<br>To\
          \ filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`.\
          \ <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`.\
          \ <br>The filter supports the `AND` operator for multiple custom attribute\
          \ definitions (not multiple values for a given definition). Use `;` (`semicolon`)\
          \ to separate multiple queries with `AND` operation. <br>Note: the filter\
          \ only supports custom attribute values containing characters in `[a-zA-Z0-9_\\\
          -\\. ]`."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "searching by single custom attribute definition: `color==red`. <br>Searching\
          \ by single custom attribute name: `color`. <br>Searching by multiple custom\
          \ attribute definition: `color==red;security==high`. <br>Searching by  multiple\
          \ custom attribute name: `color;security`. <br>Searching by  multiple custom\
          \ attribute name `AND` custom attribute definition: `color;security==high`"
      responses:
        "200":
          description: Retrieve a list of event API product versions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiProductVersionsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Event API Products
      summary: (Beta) Creates an event API product version
      description: Use this API to create an event API product version.
      operationId: createEventApiProductVersion
      requestBody:
        description: Event API product version
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventApiProductVersion'
        required: true
      responses:
        "201":
          description: Created an event API product version. Returns the newly saved
            event API product version in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiProductVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/enums/{enumId}/versions:
    get:
      tags:
      - Enums
      summary: Lists enums
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Enums/getEnumVersions>another endpoint.</a><br><br>*Use\
        \ this API to list enum versions based on certain criteria."
      operationId: getEnumVersionsForEnum
      parameters:
      - name: enumId
        in: path
        description: The ID of the enum object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: pageSize
        in: query
        description: The number of enum versions to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
      - name: ids
        in: query
        description: The ids of the enum versions.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: versions
        in: query
        description: The versions of the enum version.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: displayName
        in: query
        description: The display name of the enum versions.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: customAttributes
        in: query
        description: "Returns the entities that match the custom attribute filter.<br>To\
          \ filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`.\
          \ <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`.\
          \ <br>The filter supports the `AND` operator for multiple custom attribute\
          \ definitions (not multiple values for a given definition). Use `;` (`semicolon`)\
          \ to separate multiple queries with `AND` operation. <br>Note: the filter\
          \ only supports custom attribute values containing characters in `[a-zA-Z0-9_\\\
          -\\. ]`."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "searching by single custom attribute definition: `color==red`. <br>Searching\
          \ by single custom attribute name: `color`. <br>Searching by multiple custom\
          \ attribute definition: `color==red;security==high`. <br>Searching by  multiple\
          \ custom attribute name: `color;security`. <br>Searching by  multiple custom\
          \ attribute name `AND` custom attribute definition: `color;security==high`"
      responses:
        "200":
          description: Retrieve a list of enums and the accompanying metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/TopicAddressEnumVersionsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    post:
      tags:
      - Enums
      summary: Creates an enum version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Enums/createEnumVersion>another endpoint.</a><br><br>*description"
      operationId: createEnumVersionForEnum
      parameters:
      - name: enumId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Enum object description with its values.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/TopicAddressEnumVersion'
        required: true
      responses:
        "201":
          description: Created an enum version and its values. The newly saved enum
            version object is returned in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/TopicAddressEnumVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/enumVersions/{id}/state:
    patch:
      tags:
      - Enums
      summary: Updates the state of an enum version object
      description: Use this API to update the state of an enum version. You only need
        to specify the target stateId field.
      operationId: updateEnumVersionState
      parameters:
      - name: id
        in: path
        description: The ID of the enum version object to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The state object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VersionedObjectStateChangeRequest'
        required: true
      responses:
        "200":
          description: The updated state of the enum version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/StateChangeRequestResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/applicationDomains/{id}:
    get:
      tags:
      - Application Domains
      summary: Retrieves an application domain object
      description: Use this API to retrieve a single application domain by its ID.
      operationId: getApplicationDomain
      parameters:
      - name: id
        in: path
        description: The ID of the application domain object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: include
        in: query
        description: "Specify extra data to be included, options are: stats"
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: The application domain object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApplicationDomainResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Application Domains
      summary: Deletes an application domain object
      description: "Use this API to delete an application domain. This action also\
        \ deletes all applications, events, and schemas in the application domain.\
        \ You cannot undo this operation."
      operationId: deleteApplicationDomain
      parameters:
      - name: id
        in: path
        description: The ID of the application domain object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Application Domains
      summary: Updates an application domain object
      description: Use this API to update an application domain. You only need to
        specify the fields that need to be updated.
      operationId: updateApplicationDomain
      parameters:
      - name: id
        in: path
        description: The ID of the application domain object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The application domain object.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/ApplicationDomain'
        required: true
      responses:
        "200":
          description: The updated application domain object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApplicationDomainResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/configurationTypes/{id}:
    get:
      tags:
      - Configuration Types
      summary: (Beta) Retrieves a configuration type object
      description: Use this API to retrieve a single configuration type by its ID.
      operationId: getConfigurationType
      parameters:
      - name: id
        in: path
        description: The ID of the configuration type object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The configuration type object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ConfigurationTypeResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventVersions/{id}/state:
    patch:
      tags:
      - Events
      summary: Updates the state of an event version object
      description: Use this API to update the state of event version. You only need
        to specify the target stateId field
      operationId: updateEventVersionState
      parameters:
      - name: id
        in: path
        description: The ID of the event version object to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The state object.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/VersionedObjectStateChangeRequest'
        required: true
      responses:
        "200":
          description: The updated state of the event version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/StateChangeRequestResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/enumVersions/{versionId}:
    get:
      tags:
      - Enums
      summary: Retrieves an enumeration version object
      description: Use this API to retrieve a single enumeration version by its ID.
      operationId: getEnumVersion
      parameters:
      - name: versionId
        in: path
        description: The ID of the enumeration version object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The enumeration version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/TopicAddressEnumVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/events/{eventId}/versions:
    get:
      tags:
      - Events
      summary: Gets the event version objects for an event
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Events/getEventVersions>another endpoint.</a><br><br>*Use\
        \ this API to retrieve a list of event versions that match the given parameters."
      operationId: getEventVersionsForEvent
      parameters:
      - name: eventId
        in: path
        description: The ID of the parent event.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: customAttributes
        in: query
        description: "Returns the entities that match the custom attribute filter.<br>To\
          \ filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`.\
          \ <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`.\
          \ <br>The filter supports the `AND` operator for multiple custom attribute\
          \ definitions (not multiple values for a given definition). Use `;` (`semicolon`)\
          \ to separate multiple queries with `AND` operation. <br>Note: the filter\
          \ only supports custom attribute values containing characters in `[a-zA-Z0-9_\\\
          -\\. ]`."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "searching by single custom attribute definition: `color==red`. <br>Searching\
          \ by single custom attribute name: `color`. <br>Searching by multiple custom\
          \ attribute definition: `color==red;security==high`. <br>Searching by  multiple\
          \ custom attribute name: `color;security`. <br>Searching by  multiple custom\
          \ attribute name `AND` custom attribute definition: `color;security==high`"
      - name: displayName
        in: query
        description: Match event versions with the given display name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ids
        in: query
        description: Match event versions with the given IDs separated by commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: version
        in: query
        description: Match event version objects with the given version.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Retrieve a list of event versions.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EventVersionsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    post:
      tags:
      - Events
      summary: Creates an event version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Events/createEventVersion>another endpoint.</a><br><br>*Creates\
        \ an event version object"
      operationId: createEventVersionForEvent
      parameters:
      - name: eventId
        in: path
        description: The ID of the parent event
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: App version request body description
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/EventVersion'
        required: true
      responses:
        "201":
          description: Created an event version. Returns the newly saved event version
            object in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EventVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/applicationDomains/import:
    post:
      tags:
      - Application Domains
      summary: (Beta) Import application domains and their entities
      description: Use this API to import application domains and their nested entities.
        Please note that this endpoint is in beta and could be subject to change in
        the future
      operationId: importApplicationDomains
      requestBody:
        description: Application domain import file
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationDomainImportDTO'
        required: true
      responses:
        "202":
          description: Successfully registered import job with location identified
            in the response header
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/schemaVersions/{id}/state:
    patch:
      tags:
      - Schemas
      summary: Updates the state of a schema version object
      description: Use this API to update the state of a schema version.
      operationId: updateSchemaVersionState
      parameters:
      - name: id
        in: path
        description: The ID of the schema version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The state change object.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/VersionedObjectStateChangeRequest'
        required: true
      responses:
        "200":
          description: The updated state of the schema version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/StateChangeRequestResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/customAttributeDefinitions:
    get:
      tags:
      - Custom Attribute Definitions
      summary: Gets the custom attribute definition objects
      description: Use this API to retrieve a list of custom attributes that match
        the given parameters.
      operationId: getCustomAttributeDefinitions
      parameters:
      - name: pageSize
        in: query
        description: The number of custom attribute definitions to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: associatedEntityTypes
        in: query
        description: Match only custom attribute definitions with the given associated
          entity type names separated by commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: Retrieve a list of custom attribute definitions and the accompanying
            metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/CustomAttributeDefinitionsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Custom Attribute Definitions
      summary: Creates a custom attribute definition object
      description: Use this API to create a custom attribute definition.
      operationId: createCustomAttributeDefinition
      requestBody:
        description: The custom attribute object.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/CustomAttributeDefinition'
        required: true
      responses:
        "201":
          description: Created a custom attribute definition. Returns the newly saved
            custom attribute definition object in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/CustomAttributeDefinitionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventManagementAgents/{id}:
    get:
      tags:
      - Event Management Agents
      summary: (Beta) Retrieves an EMA object
      description: Use this API to retrieve a single EMA by its ID.
      operationId: getEventManagementAgent
      parameters:
      - name: id
        in: path
        description: The ID of the EMA object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: include
        in: query
        description: "Specify extra data to be included, options are: referencedByMessagingServiceIds"
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: The EMA object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventManagementAgentResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Event Management Agents
      summary: (Beta) Deletes an EMA object
      description: Use this API to delete an EMA.
      operationId: deleteEventManagementAgent
      parameters:
      - name: id
        in: path
        description: The ID of the EMA object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Event Management Agents
      summary: (Beta) Updates an EMA object
      description: Use this API to update an EMA. You only need to specify the fields
        that need to be updated.
      operationId: updateEventManagementAgent
      parameters:
      - name: id
        in: path
        description: The ID of the EMA object to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The EMA object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventManagementAgent'
        required: true
      responses:
        "200":
          description: The updated EMA object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventManagementAgentResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/schemaVersions/{versionId}:
    get:
      tags:
      - Schemas
      summary: Retrieves a schema version object
      description: Use this API to retrieve a single schema version by its ID.
      operationId: getSchemaVersion
      parameters:
      - name: versionId
        in: path
        description: The ID of the schema version object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The schema version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SchemaVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/messagingServiceScans/{id}:
    get:
      tags:
      - Messaging Service Scans
      summary: (Beta) Retrieves a messaging service scan object
      description: Use this API to retrieve a single messaging service scan by its
        ID.
      operationId: getMessagingServiceScan
      parameters:
      - name: id
        in: path
        description: The ID of the messaging service scan object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The messaging service scan object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagingServiceScanResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Messaging Service Scans
      summary: (Beta) Deletes a messaging service scan object
      description: Use this API to delete a messaging service scan.
      operationId: deleteMessagingServiceScan
      parameters:
      - name: id
        in: path
        description: The ID of the messaging service scan object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/schemas/{schemaId}/versions:
    get:
      tags:
      - Schemas
      summary: Gets the schema version objects for a schema
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Schemas/getSchemaVersions>another endpoint.</a><br><br>*Use\
        \ this API to retrieve a list of schema versions that match the given parameters."
      operationId: getSchemaVersionsForSchema
      parameters:
      - name: schemaId
        in: path
        description: The ID of the schema object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: pageSize
        in: query
        description: The number of schemas to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
      - name: versions
        in: query
        description: Match only with schema versions.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: displayName
        in: query
        description: Match only schema versions with the given display name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ids
        in: query
        description: Match only schema versions with the given IDs separated by commas.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: customAttributes
        in: query
        description: "Returns the entities that match the custom attribute filter.<br>To\
          \ filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`.\
          \ <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`.\
          \ <br>The filter supports the `AND` operator for multiple custom attribute\
          \ definitions (not multiple values for a given definition). Use `;` (`semicolon`)\
          \ to separate multiple queries with `AND` operation. <br>Note: the filter\
          \ only supports custom attribute values containing characters in `[a-zA-Z0-9_\\\
          -\\. ]`."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "searching by single custom attribute definition: `color==red`. <br>Searching\
          \ by single custom attribute name: `color`. <br>Searching by multiple custom\
          \ attribute definition: `color==red;security==high`. <br>Searching by  multiple\
          \ custom attribute name: `color;security`. <br>Searching by  multiple custom\
          \ attribute name `AND` custom attribute definition: `color;security==high`"
      responses:
        "200":
          description: Retrieve a list of schema versions and the accompanying metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SchemaVersionsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    post:
      tags:
      - Schemas
      summary: Creates a schema version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Schemas/createSchemaVersion>another endpoint.</a><br><br>*Creates\
        \ a schema version object"
      operationId: createSchemaVersionForSchema
      parameters:
      - name: schemaId
        in: path
        description: The ID of the parent schema
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: schema version details
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/SchemaVersion'
        required: true
      responses:
        "201":
          description: Created a schema version. The newly saved schema version object
            is returned in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SchemaVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/eventManagementAgentRegions:
    get:
      tags:
      - Event Management Agent Regions
      summary: (Beta) Retrieves a list of event management agent regions.
      description: Use this API to retrieve a list of event management agent regions.
      operationId: getEventManagementAgentRegions
      parameters:
      - name: pageSize
        in: query
        description: The number of event management agent regions to get per page.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        "200":
          description: The list of event management agent regions and the accompanying
            metadata.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EventManagementAgentRegionsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventApiVersions/{versionId}:
    get:
      tags:
      - Event APIs
      summary: Retrieves an event API version
      description: Use this API to retrieve a single event API version by its ID.
      operationId: getEventApiVersion
      parameters:
      - name: versionId
        in: path
        description: The ID of the event API version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: include
        in: query
        description: A list of additional entities to include in the response.
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: parent
      responses:
        "200":
          description: The event API version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Event APIs
      summary: Deletes an event API version
      description: Use this API to delete an event API version by event API version
        ID.
      operationId: deleteEventApiVersion
      parameters:
      - name: versionId
        in: path
        description: The ID of the event API version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Event APIs
      summary: Updates an event API by event API version ID
      description: Use this API to update an event API version by event API version
        ID.You only need to specify the fields that need to be updated.
      operationId: updateEventApiVersion
      parameters:
      - name: versionId
        in: path
        description: The ID of the event API version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The event API version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventApiVersion'
        required: true
      responses:
        "200":
          description: The updated event API version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/enums/{enumId}/versions/{id}:
    get:
      tags:
      - Enums
      summary: Retrieves an enum version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Enums/getEnumVersion>another endpoint.</a><br><br>*Use\
        \ this API to retrieve a single enum version by its ID."
      operationId: getEnumVersionForEnum
      parameters:
      - name: enumId
        in: path
        description: The ID of the enum object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the enum version object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The enum version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/TopicAddressEnumVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    delete:
      tags:
      - Enums
      summary: Deletes an enum version
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Enums/deleteEnumVersion>another endpoint.</a><br><br>*Use\
        \ this API to delete an enum version. The version must not be in use by any\
        \ events else it cannot be deleted. This also deletes the version's values."
      operationId: deleteEnumVersionForEnum
      parameters:
      - name: enumId
        in: path
        description: The ID of the enum object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the enum version object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned if the delete was successful.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: If the enum version did not exist.
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    patch:
      tags:
      - Enums
      summary: Updates an enum version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Enums/updateEnumVersion>another endpoint.</a><br><br>*Use\
        \ this API to update an enum version. You only need to specify the fields\
        \ that need to be updated."
      operationId: updateEnumVersionForEnum
      parameters:
      - name: enumId
        in: path
        description: The ID of the parent enum object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the enum version object to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The enum version object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicAddressEnumVersion'
        required: true
      responses:
        "200":
          description: The updated application version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/TopicAddressEnumVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/events/{eventId}/versions/{id}:
    get:
      tags:
      - Events
      summary: Retrieves an event version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Events/getEventVersion>another endpoint.</a><br><br>*Use\
        \ this API to retrieve a single event version by its ID."
      operationId: getEventVersionForEvent
      parameters:
      - name: eventId
        in: path
        description: The ID of the parent event.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the event version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The event version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EventVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    delete:
      tags:
      - Events
      summary: Deletes an event version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Events/deleteEventVersion>another endpoint.</a><br><br>*Use\
        \ this API to delete an event version."
      operationId: deleteEventVersionForEvent
      parameters:
      - name: eventId
        in: path
        description: The ID of the parent event
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the event version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    patch:
      tags:
      - Events
      summary: Updates an event version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Events/updateEventVersion>another endpoint.</a><br><br>*Use\
        \ this API to update an event version. You only need to specify the fields\
        \ that need to be updated."
      operationId: updateEventVersionForEvent
      parameters:
      - name: eventId
        in: path
        description: The ID of the parent event object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the event version object to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The event version object.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/EventVersion'
        required: true
      responses:
        "200":
          description: The updated event version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EventVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/eventApis/{eventApiId}/versions:
    get:
      tags:
      - Event APIs
      summary: Retrieves a list of event API versions
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Event%20APIs/getEventApiVersions>another endpoint.</a><br><br>*Use\
        \ this API to retrieve a list of event API versions under a particular event\
        \ API matching the given parameters."
      operationId: getEventApiVersionsForEventApi
      parameters:
      - name: eventApiId
        in: path
        description: The ID of the parent event API.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: query
        description: The ID of the event API version.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: displayName
        in: query
        description: Match event API versions with the given display name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ids
        in: query
        description: Match event API versions with the given IDs separated by commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: version
        in: query
        description: Match event API versions with the given version.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: stateId
        in: query
        description: Match event API versions with the given state ID.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: customAttributes
        in: query
        description: "Returns the entities that match the custom attribute filter.<br>To\
          \ filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`.\
          \ <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`.\
          \ <br>The filter supports the `AND` operator for multiple custom attribute\
          \ definitions (not multiple values for a given definition). Use `;` (`semicolon`)\
          \ to separate multiple queries with `AND` operation. <br>Note: the filter\
          \ only supports custom attribute values containing characters in `[a-zA-Z0-9_\\\
          -\\. ]`."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "searching by single custom attribute definition: `color==red`. <br>Searching\
          \ by single custom attribute name: `color`. <br>Searching by multiple custom\
          \ attribute definition: `color==red;security==high`. <br>Searching by  multiple\
          \ custom attribute name: `color;security`. <br>Searching by  multiple custom\
          \ attribute name `AND` custom attribute definition: `color;security==high`"
      responses:
        "200":
          description: Retrieve a list of event API versions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiVersionsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    post:
      tags:
      - Event APIs
      summary: Creates an event API version
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Event%20APIs/createEventApiVersion>another endpoint.</a><br><br>*Use\
        \ this API to create an event API version."
      operationId: createEventApiVersionForEventApi
      parameters:
      - name: eventApiId
        in: path
        description: The ID of the parent event API
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Event API version
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventApiVersion'
        required: true
      responses:
        "201":
          description: Created an event API version. Returns the newly saved event
            API version in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/customAttributeDefinitions/{id}:
    get:
      tags:
      - Custom Attribute Definitions
      summary: Retrieves a custom attribute definition object
      description: Use this API to retrieve a single custom attribute by its ID.
      operationId: getCustomAttributeDefinition
      parameters:
      - name: id
        in: path
        description: The ID of the custom attribute object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The custom attribute definition object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/CustomAttributeDefinitionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Custom Attribute Definitions
      summary: Deletes a custom attribute definition object
      description: Use this API to delete a custom attribute definition.
      operationId: deleteCustomAttributeDefinition
      parameters:
      - name: id
        in: path
        description: The ID of the custom attribute definition
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Custom Attribute Definitions
      summary: Updates a custom attribute definition object
      description: Use this API to update a custom attribute definition. You can only
        update the associated entity types.
      operationId: updateCustomAttributeDefinition
      parameters:
      - name: id
        in: path
        description: The ID of the custom attribute object to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The custom attribute definition object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomAttributeDefinition'
      responses:
        "200":
          description: The updated custom attribute definition object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/CustomAttributeDefinitionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/applicationVersions/{versionId}:
    get:
      tags:
      - Applications
      summary: Retrieves an application version object
      description: Use this API to retrieve a single application version by its ID.
      operationId: getApplicationVersion
      parameters:
      - name: versionId
        in: path
        description: The ID of the application version object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The application version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApplicationVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Applications
      summary: Deletes an application version object
      description: Use this API to delete an application version.
      operationId: deleteApplicationVersion
      parameters:
      - name: versionId
        in: path
        description: The ID of the application version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Applications
      summary: Updates an application version object
      description: Use this API to update an application version. You only need to
        specify the fields that need to be updated.
      operationId: updateApplicationVersion
      parameters:
      - name: versionId
        in: path
        description: The ID of the application version object to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: include
        in: query
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: relationsBrokerType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: The application version object.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/ApplicationVersion'
        required: true
      responses:
        "200":
          description: The updated application version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApplicationVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/schemas/{schemaId}/versions/{id}:
    get:
      tags:
      - Schemas
      summary: Retrieves a schema version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Schemas/getSchemaVersion>another endpoint.</a><br><br>*Use\
        \ this API to retrieve a single schema by its ID."
      operationId: getSchemaVersionForSchema
      parameters:
      - name: schemaId
        in: path
        description: The ID of the schema object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the schema version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The schema version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SchemaVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    delete:
      tags:
      - Schemas
      summary: Deletes a schema version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Schemas/deleteSchemaVersion>another endpoint.</a><br><br>*Use\
        \ this API to delete a schema version."
      operationId: deleteSchemaVersionForSchema
      parameters:
      - name: schemaId
        in: path
        description: The ID of the schema object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the schema version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    patch:
      tags:
      - Schemas
      summary: Updates a schema version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Schemas/updateSchemaVersion>another endpoint.</a><br><br>*Use\
        \ this API to update a schema version."
      operationId: updateSchemaVersionForSchema
      parameters:
      - name: schemaId
        in: path
        description: The ID of the schema object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the schema version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/SchemaVersion'
        required: true
      responses:
        "200":
          description: The schema version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/SchemaVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/eventApiVersions/{versionId}/state:
    patch:
      tags:
      - Event APIs
      summary: Updates the state of an event API version by event API version ID
      description: Use this API to update the state of an event API version. You only
        need to specify the state ID field with the desired state ID.
      operationId: updateEventApiVersionState
      parameters:
      - name: versionId
        in: path
        description: The ID of the event API version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The Event API version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventApiVersion'
        required: true
      responses:
        "200":
          description: The updated state of the event API version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateChangeRequestResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/enums/{enumId}/versions/{id}/state:
    patch:
      tags:
      - Enums
      summary: Updates the state of an enum version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Enums/updateEnumVersionState>another endpoint.</a><br><br>*Use\
        \ this API to update the state of an enum version. You only need to specify\
        \ the target stateId field."
      operationId: updateEnumVersionStateForEnum
      parameters:
      - name: enumId
        in: path
        description: The ID of the parent enum object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the enum version object to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The enum version object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicAddressEnumVersion'
        required: true
      responses:
        "200":
          description: The updated state of the enum version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/VersionedObjectStateChangeRequest'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/eventApiProductVersions/{versionId}:
    get:
      tags:
      - Event API Products
      summary: (Beta) Retrieves an event API product version
      description: Use this API to retrieve a single event API product version by
        its ID.
      operationId: getEventApiProductVersion
      parameters:
      - name: versionId
        in: path
        description: The ID of the event API product version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: include
        in: query
        description: A list of additional entities to include in the response.
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: parent
      - name: clientAppId
        in: query
        description: Match event API product versions with the given clientAppId.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: The event API product version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiProductVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Event API Products
      summary: (Beta) Deletes an event API product version by ID
      description: Use this API to delete an event API product version by ID.
      operationId: deleteEventApiProductVersion
      parameters:
      - name: versionId
        in: path
        description: The ID of the event API product version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Event API Products
      summary: (Beta) Updates an event API product version by version ID
      description: Use this API to update an event API product version. You only need
        to specify the fields that need to be updated.
      operationId: updateEventApiProductVersion
      parameters:
      - name: versionId
        in: path
        description: The ID of the event API product version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The event API product version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventApiProductVersion'
        required: true
      responses:
        "200":
          description: The updated event API product version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiProductVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/messagingServiceScans/{scanId}/logs:
    get:
      tags:
      - Messaging Service Scan Logs
      summary: (Beta) Retrieves a list of messaging service scan logs
      description: Use this API to retrieve a list of messaging service scan logs
        that match the given parameters.
      operationId: getMessagingServiceScansLogs
      parameters:
      - name: scanId
        in: path
        description: The ID of the messaging service scan we want logs for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pageSize
        in: query
        description: The number of messaging service scan logs to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: sort
        in: query
        description: "Sort based on the provided parameters. <br> The value can either\
          \ be a standalone field name (`?sort=<field>`) or a field and direction,\
          \ which must be delimited by a colon (`?sort=<field>:<asc|desc>`). If the\
          \ direction is not specified, the default is ascending."
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: The list of messaging service scan logs and the accompanying
            metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagingServiceScanLogListResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventVersions/{id}/messagingServices:
    put:
      tags:
      - Events
      summary: Update messaging service association for an event version object
      description: Use this API to update the messaging service association for an
        event version.
      operationId: updateMsgSvcAssociationForEventVersion
      parameters:
      - name: id
        in: path
        description: The ID of the event version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The messaging service association object
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/MessagingServiceAssociationDTO'
        required: true
      responses:
        "200":
          description: The updated messaging service associations.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/MessagingServiceAssociationResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/events/{eventId}/versions/{id}/state:
    patch:
      tags:
      - Events
      summary: Updates the state of an event version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Events/updateEventVersionState>another endpoint.</a><br><br>*Use\
        \ this API to update the state of event version. You only need to specify\
        \ the target stateId field"
      operationId: updateEventVersionStateForEvent
      parameters:
      - name: eventId
        in: path
        description: The ID of the parent event object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the event version object to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The event version object.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/EventVersion'
        required: true
      responses:
        "200":
          description: The updated state of the event version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/VersionedObjectStateChangeRequest'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/eventApis/{eventApiId}/versions/{id}:
    get:
      tags:
      - Event APIs
      summary: Retrieves an event API version
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Event%20APIs/getEventApiVersion>another endpoint.</a><br><br>*Use\
        \ this API to retrieve a single event API version using the parent ID and\
        \ the version's ID."
      operationId: getEventApiVersionForEventApi
      parameters:
      - name: eventApiId
        in: path
        description: The ID of the parent event API.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the event API version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The event API version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    delete:
      tags:
      - Event APIs
      summary: Deletes an event API version
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Event%20APIs/deleteEventApiVersion>another endpoint.</a><br><br>*Use\
        \ this API to delete an event API version."
      operationId: deleteEventApiVersionForEventApi
      parameters:
      - name: eventApiId
        in: path
        description: The ID of the parent event API
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the event API version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    patch:
      tags:
      - Event APIs
      summary: Updates an event API
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Event%20APIs/updateEventApiVersion>another endpoint.</a><br><br>*Use\
        \ this API to update an event API version. You only need to specify the fields\
        \ that need to be updated."
      operationId: updateEventApiVersionForEventApi
      parameters:
      - name: eventApiId
        in: path
        description: The ID of the parent event API.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the event API version to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The event API version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventApiVersion'
        required: true
      responses:
        "200":
          description: The updated event API version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/applications/{applicationId}/versions:
    get:
      tags:
      - Applications
      summary: Gets application version objects
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Applications/getApplicationVersions>another endpoint.</a><br><br>*Use\
        \ this API to retrieve a list of application versions that match the given\
        \ parameters."
      operationId: getApplicationVersionsForApplication
      parameters:
      - name: applicationId
        in: path
        description: The ID of the parent application.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: displayName
        in: query
        description: Match application versions with the given display name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ids
        in: query
        description: Match application versions with the given IDs separated by commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: version
        in: query
        description: Match application version objects with the given version.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: customAttributes
        in: query
        description: "Returns the entities that match the custom attribute filter.<br>To\
          \ filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`.\
          \ <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`.\
          \ <br>The filter supports the `AND` operator for multiple custom attribute\
          \ definitions (not multiple values for a given definition). Use `;` (`semicolon`)\
          \ to separate multiple queries with `AND` operation. <br>Note: the filter\
          \ only supports custom attribute values containing characters in `[a-zA-Z0-9_\\\
          -\\. ]`."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "searching by single custom attribute definition: `color==red`. <br>Searching\
          \ by single custom attribute name: `color`. <br>Searching by multiple custom\
          \ attribute definition: `color==red;security==high`. <br>Searching by  multiple\
          \ custom attribute name: `color;security`. <br>Searching by  multiple custom\
          \ attribute name `AND` custom attribute definition: `color;security==high`"
      responses:
        "200":
          description: Retrieve a list of application versions.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApplicationVersionsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    post:
      tags:
      - Applications
      summary: Creates an application version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Applications/createApplicationVersion>another endpoint.</a><br><br>*Creates\
        \ an application version object"
      operationId: createApplicationVersionForApplication
      parameters:
      - name: applicationId
        in: path
        description: The ID of the parent application
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: App version request body description
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/ApplicationVersion'
        required: true
      responses:
        "201":
          description: Created an application version. Returns the newly saved application
            version object in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApplicationVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/applicationVersions/{versionId}/state:
    patch:
      tags:
      - Applications
      summary: Updates the state of an application version object
      description: Use this API to update the state of an application version. You
        only need to specify the target stateId field.
      operationId: updateApplicationVersionState
      parameters:
      - name: versionId
        in: path
        description: The ID of the application version object to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The state change object.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/VersionedObjectStateChangeRequest'
        required: true
      responses:
        "200":
          description: The updated state of the application version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/StateChangeRequestResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/schemas/{schemaId}/versions/{id}/state:
    patch:
      tags:
      - Schemas
      summary: Updates the state of a schema version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Schemas/updateSchemaVersionState>another endpoint.</a><br><br>*Use\
        \ this API to update the state of a schema version."
      operationId: updateSchemaVersionStateForSchema
      parameters:
      - name: schemaId
        in: path
        description: The ID of the schema object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the schema version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The state change object.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/VersionedObjectStateChangeRequest'
        required: true
      responses:
        "200":
          description: The updated state of the schema version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/VersionedObjectStateChangeRequest'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/messagingServices/{id}/removeAssociation:
    put:
      tags:
      - Messaging Services
      summary: (Beta) Removes a messaging service's association to the requested entity.
      description: Use this API to remove the association between a messaging service
        and either of EVENT_MESH or EVENT_MANAGEMENT_AGENT.
      operationId: removeAssociationMessagingService
      parameters:
      - name: id
        in: path
        description: The ID of the messaging service object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The association object with the value matching either EVENT_MESH
          or EVENT_MANAGEMENT_AGENT.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingServiceRemoveAssociation'
        required: true
      responses:
        "200":
          description: "The updated messaging service object, e.g. if the API request\
            \ body had {\"association\": \"EVENT_MESH\"} then the resulting object\
            \ would not have eventMeshId attribute."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagingServiceResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventApiProductVersions/{versionId}/state:
    patch:
      tags:
      - Event API Products
      summary: Updates the state of an event API product version by ID
      description: Use this API to update the state of an event API product version.
        You only need to specify the state ID field with the desired state ID.
      operationId: updateEventApiProductVersionState
      parameters:
      - name: versionId
        in: path
        description: The ID of the event API product version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The event API product version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventApiProductVersion'
        required: true
      responses:
        "200":
          description: The updated state of the event API product version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateChangeRequestResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventApis/{eventApiId}/versions/{id}/state:
    patch:
      tags:
      - Event APIs
      summary: Updates the state of an event API version
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Event%20APIs/updateEventApiVersionState>another endpoint.</a><br><br>*Use\
        \ this API to update the state of an event API version. You only need to specify\
        \ the state ID field with the desired state ID."
      operationId: updateEventApiVersionStateForEventApi
      parameters:
      - name: eventApiId
        in: path
        description: The ID of the parent event API.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the event API version to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The Event API version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventApiVersion'
        required: true
      responses:
        "200":
          description: The updated state of the event API version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionedObjectStateChangeRequest'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/applications/{applicationId}/versions/{id}:
    get:
      tags:
      - Applications
      summary: Retrieves an application version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Applications/getApplicationVersion>another endpoint.</a><br><br>*Use\
        \ this API to retrieve a single application version by its ID."
      operationId: getApplicationVersionForApplication
      parameters:
      - name: applicationId
        in: path
        description: The ID of the parent application.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the application version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The application version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApplicationVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    delete:
      tags:
      - Applications
      summary: Deletes an application version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Applications/deleteApplicationVersion>another endpoint.</a><br><br>*Use\
        \ this API to delete an application version."
      operationId: deleteApplicationVersionForApplication
      parameters:
      - name: applicationId
        in: path
        description: The ID of the parent application
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the application version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    patch:
      tags:
      - Applications
      summary: Updates an application version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Applications/updateApplicationVersion>another endpoint.</a><br><br>*Use\
        \ this API to update an application version. You only need to specify the\
        \ fields that need to be updated."
      operationId: updateApplicationVersionForApplication
      parameters:
      - name: applicationId
        in: path
        description: The ID of the parent application object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the application version object to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The application version object.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/ApplicationVersion'
        required: true
      responses:
        "200":
          description: The updated application version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApplicationVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/eventManagementAgents/{id}/configuration/raw:
    get:
      tags:
      - Event Management Agents
      summary: (Beta) Retrieves the raw configs in string format for an EMA object
      description: Use this API to retrieve the raw configs for a single EMA by its
        ID.
      operationId: getEventManagementAgentConfigRaw
      parameters:
      - name: id
        in: path
        description: The ID of the EMA object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The EMA config in yaml structure.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventApiProducts/{eventApiProductId}/versions:
    get:
      tags:
      - Event API Products
      summary: Retrieves a list of event API product versions
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Event%20API%20Products/getEventApiProductVersions>another\
        \ endpoint.</a><br><br>*Use this API to retrieve a list of event API product\
        \ versions under a particular event API product matching the given parameters."
      operationId: getEventApiProductVersionsForEventApiProduct
      parameters:
      - name: eventApiProductId
        in: path
        description: The ID of the parent event API product.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: displayName
        in: query
        description: Match event API product versions with the given display name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: id
        in: query
        description: The ID of the event API product version.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ids
        in: query
        description: Match event API product versions with the given IDs separated
          by commas.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: version
        in: query
        description: Match event API product versions with the given version.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: stateId
        in: query
        description: Match event API product versions with the given state ID.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: customAttributes
        in: query
        description: "Returns the entities that match the custom attribute filter.<br>To\
          \ filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`.\
          \ <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`.\
          \ <br>The filter supports the `AND` operator for multiple custom attribute\
          \ definitions (not multiple values for a given definition). Use `;` (`semicolon`)\
          \ to separate multiple queries with `AND` operation. <br>Note: the filter\
          \ only supports custom attribute values containing characters in `[a-zA-Z0-9_\\\
          -\\. ]`."
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: "searching by single custom attribute definition: `color==red`. <br>Searching\
          \ by single custom attribute name: `color`. <br>Searching by multiple custom\
          \ attribute definition: `color==red;security==high`. <br>Searching by  multiple\
          \ custom attribute name: `color;security`. <br>Searching by  multiple custom\
          \ attribute name `AND` custom attribute definition: `color;security==high`"
      responses:
        "200":
          description: Retrieve a list of event API product versions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiProductVersionsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    post:
      tags:
      - Event API Products
      summary: Creates an event API product version
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Event%20API%20Products/createEventApiProductVersion>another\
        \ endpoint.</a><br><br>*Use this API to create an event API product version."
      operationId: createEventApiProductVersionForEventApiProduct
      parameters:
      - name: eventApiProductId
        in: path
        description: The ID of the parent event API product
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Event API product version
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventApiProductVersion'
        required: true
      responses:
        "201":
          description: Created an event API product version. Returns the newly saved
            event API product version in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiProductVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/messagingServiceScans/{scanId}/dataCollection:
    get:
      tags:
      - Messaging Service Scan Data
      summary: (Beta) Retrieves a list of messaging service scan data
      description: Use this API to retrieve a list of messaging service scan data
        that match the given parameters.
      operationId: getMessagingServiceScansData
      parameters:
      - name: scanId
        in: path
        description: The ID of the messaging service scan we want data for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pageSize
        in: query
        description: The number of messaging service scan data to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: sort
        in: query
        description: The name of the field to sort on.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ids
        in: query
        description: The IDs of the messaging service scan data.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: collectionTypes
        in: query
        description: Match only scan data whose dataCollectionType matches the given
          list.
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: The list of messaging service scan data and the accompanying
            metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagingServiceScanDataListResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventManagementAgents/{id}/configuration/file:
    get:
      tags:
      - Event Management Agents
      summary: (Beta) Retrieves the raw configs in file format for an EMA object
      description: Use this API to retrieve the raw configs for a single EMA by its
        ID.
      operationId: getEventManagementAgentConfigFile
      parameters:
      - name: id
        in: path
        description: The ID of the EMA object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The EMA config in a yaml file named application.yml.
          content:
            application/octet-stream:
              schema:
                type: string
                x-content-type: application/octet-stream
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventApis/{eventApiId}/versions/{id}/asyncApi:
    get:
      tags:
      - Event APIs
      summary: Retrieves the AsyncAPI specification for an event API version
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Event%20APIs/getAsyncApiForEventApiVersion>another\
        \ endpoint.</a><br><br>*Use this API to retrieve the AsyncAPI specification\
        \ for an event API version using the parent ID and the version's ID."
      operationId: getEventApiVersionAsyncApiForEventApi
      parameters:
      - name: eventApiId
        in: path
        description: The ID of the parent event API.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the event API version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: showVersioning
        in: query
        description: Include versions in each AsyncAPI object's name when only one
          version is present
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: includedExtensions
        in: query
        description: The event portal database keys to include for each AsyncAPI object.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: all
      - name: format
        in: query
        description: The format in which to retrieve the AsyncAPI specification. Possible
          values are yaml and json.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - json
          - yaml
          default: json
      - name: version
        in: query
        description: The version of AsyncAPI to use
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: 2.5.0
      - name: eventApiProductVersionId
        in: query
        description: The ID of the event API Product Version to use for generating
          bindings.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: planId
        in: query
        description: The ID of the plan to use for generating bindings.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: gatewayMessagingServiceIds
        in: query
        description: The list IDs of gateway messaging services for generating bindings.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: The AsyncAPI specification for the event API version.
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
            text/plain:
              schema:
                type: string
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/eventApiVersions/{eventApiVersionId}/asyncApi:
    get:
      tags:
      - Event APIs
      summary: Retrieves the AsyncAPI specification for an event API version
      description: Use this API to retrieve the AsyncAPI specification for an event
        API version.
      operationId: getAsyncApiForEventApiVersion
      parameters:
      - name: eventApiVersionId
        in: path
        description: The ID of the event API version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: showVersioning
        in: query
        description: Include versions in each AsyncAPI object's name when only one
          version is present
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: format
        in: query
        description: The format in which to retrieve the AsyncAPI specification. Possible
          values are yaml and json.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - json
          - yaml
          default: json
      - name: includedExtensions
        in: query
        description: The event portal database keys to include for each AsyncAPI object.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: all
      - name: version
        in: query
        description: The version of AsyncAPI to use.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: 2.5.0
      - name: asyncApiVersion
        in: query
        description: The version of AsyncAPI to use.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: eventApiProductVersionId
        in: query
        description: The ID of the event API Product Version to use for generating
          bindings.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: planId
        in: query
        description: The ID of the plan to use for generating bindings.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: gatewayMessagingServiceIds
        in: query
        description: The list IDs of gateway messaging services for generating bindings.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: The AsyncAPI specification for the event API version.
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
            text/plain:
              schema:
                type: string
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/messagingServices/{messagingServiceId}/scanStart:
    put:
      tags:
      - Messaging Services
      summary: (Beta) Requests a scan to run against a messaging service
      description: Use this API to make a scan request on a messaging service object.
      operationId: scanStartMessagingService
      parameters:
      - name: messagingServiceId
        in: path
        description: The ID of the messaging service object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The messaging service object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingServiceOperation'
        required: true
      responses:
        "200":
          description: Requested a scan on the messaging service. The operation object
            with ID set as ID of the created scan Object is returned in the response
            body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagingServiceOperationResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/applications/{applicationId}/versions/{id}/state:
    patch:
      tags:
      - Applications
      summary: Updates the state of an application version object
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Applications/updateApplicationVersionState>another\
        \ endpoint.</a><br><br>*Use this API to update the state of an application\
        \ version. You only need to specify the target stateId field."
      operationId: updateApplicationVersionStateForApplication
      parameters:
      - name: applicationId
        in: path
        description: The ID of the parent application object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the application version object to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The application version object.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/ApplicationVersion'
        required: true
      responses:
        "200":
          description: The updated state of the application version object.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/VersionedObjectStateChangeRequest'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/applicationVersions/{versionId}/messagingServices:
    put:
      tags:
      - Applications
      summary: Update messaging service association for an application version object
      description: Use this API to update the messaging service association for an
        application version.
      operationId: updateMsgSvcAssociationForAppVersion
      parameters:
      - name: versionId
        in: path
        description: The ID of the application version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The messaging service association object
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/MessagingServiceAssociationDTO'
        required: true
      responses:
        "200":
          description: The updated messaging service associations.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/MessagingServiceAssociationResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventApiProductMemAssociations/{memAssociationId}:
    delete:
      tags:
      - Event API Products
      summary: (Beta) Disassociates a gateway messaging service from an event API
        product version by association ID
      description: Use this API to disassociate an event API product version and gateway
        messaging service by association ID.
      operationId: disassociateGatewayMessagingServiceFromEventApiProductVersionById
      parameters:
      - name: memAssociationId
        in: path
        description: The association ID to perform the disassociation for
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventApiProducts/{eventApiProductId}/versions/{id}:
    get:
      tags:
      - Event API Products
      summary: Retrieves an event API product version
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Event%20API%20Products/getEventApiProductVersion>another\
        \ endpoint.</a><br><br>*Use this API to retrieve a single event API product\
        \ version using the parent ID and the version's ID."
      operationId: getEventApiProductVersionForEventApiProduct
      parameters:
      - name: eventApiProductId
        in: path
        description: The ID of the parent event API product.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the event API product version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The event API product version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiProductVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    delete:
      tags:
      - Event API Products
      summary: Deletes an event API product version
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Event%20API%20Products/deleteEventApiProductVersion>another\
        \ endpoint.</a><br><br>*Use this API to delete an event API product version."
      operationId: deleteEventApiProductVersionForEventApiProduct
      parameters:
      - name: eventApiProductId
        in: path
        description: The ID of the parent event API product
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the event API product version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    patch:
      tags:
      - Event API Products
      summary: Updates an event API product version
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Event%20API%20Products/updateEventApiProductVersion>another\
        \ endpoint.</a><br><br>*Use this API to update an event API product version.\
        \ You only need to specify the fields that need to be updated."
      operationId: updateEventApiProductVersionForEventApiProduct
      parameters:
      - name: eventApiProductId
        in: path
        description: The ID of the parent event API product.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the event API product version to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The event API product version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventApiProductVersion'
        required: true
      responses:
        "200":
          description: The updated event API product version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApiProductVersionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/messagingServiceScans/{scanId}/dataCollection/{id}:
    get:
      tags:
      - Messaging Service Scan Data
      summary: (Beta) Retrieves a messaging service scan data object
      description: Use this API to retrieve a single messaging service scan data by
        its ID.
      operationId: getMessagingServiceScanData
      parameters:
      - name: scanId
        in: path
        description: The ID of the messaging service scan object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the messaging service scan data object.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The messaging service scan data object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagingServiceScanDataResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/applications/{applicationId}/versions/{id}/asyncApi:
    get:
      tags:
      - Applications
      summary: Retrieves the AsyncAPI specification for an application version
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Applications/getAsyncApiForApplicationVersion>another\
        \ endpoint.</a><br><br>*Use this API to retrieve the AsyncAPI specification\
        \ for an application version using the parent ID and the version's ID."
      operationId: getApplicationVersionAsyncApiForApplication
      parameters:
      - name: applicationId
        in: path
        description: The ID of the parent application.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the application version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: showVersioning
        in: query
        description: Include versions in each AsyncAPI object's name when only one
          version is present
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: includedExtensions
        in: query
        description: The event portal database keys to include for each AsyncAPI object.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: all
      - name: asyncApiVersion
        in: query
        description: The version of AsyncAPI to use
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: 2.5.0
      - name: format
        in: query
        description: The format in which to retrieve the AsyncAPI specification. Possible
          values are yaml and json.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - json
          - yaml
          default: json
      - name: messagingServiceId
        in: query
        description: Applies bindings from consumed events that are published in this
          messaging service's modeled event mesh.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: The AsyncAPI specification for the application version.
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
            text/plain:
              schema:
                type: string
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/applicationVersions/{applicationVersionId}/asyncApi:
    get:
      tags:
      - Applications
      summary: Retrieves the AsyncAPI specification for an application version
      description: Use this API to retrieve the AsyncAPI specification for an application
        version.
      operationId: getAsyncApiForApplicationVersion
      parameters:
      - name: applicationVersionId
        in: path
        description: The ID of the application version.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: format
        in: query
        description: The format in which to retrieve the AsyncAPI specification. Possible
          values are yaml and json.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - json
          - yaml
          default: json
      - name: showVersioning
        in: query
        description: Include versions in each AsyncAPI object's name when only one
          version is present
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: includedExtensions
        in: query
        description: The event portal database keys to include for each AsyncAPI object.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: all
      - name: asyncApiVersion
        in: query
        description: The version of AsyncAPI to use.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: 2.5.0
      - name: messagingServiceId
        in: query
        description: Applies bindings from consumed events that are published in this
          messaging service's modeled event mesh.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: The AsyncAPI specification for the application version.
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
            text/plain:
              schema:
                type: string
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventApiProducts/{eventApiProductId}/versions/{id}/state:
    patch:
      tags:
      - Event API Products
      summary: Updates the state of an event API product version
      description: "*deprecationDate: 2022-11-01T00:00:00.000Z<br>removalDate: 2023-02-01T00:00:00.000Z<br>reason:\
        \ Replaced by <a href=#/Event%20API%20Products/updateEventApiProductVersionState>another\
        \ endpoint.</a><br><br>*Use this API to update the state of an event API product\
        \ version. You only need to specify the state ID field with the desired state\
        \ ID."
      operationId: updateEventApiProductVersionStateForEventApiProduct
      parameters:
      - name: eventApiProductId
        in: path
        description: The ID of the parent event API product.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the event API product version to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The event API product version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventApiProductVersion'
        required: true
      responses:
        "200":
          description: The updated state of the event API product version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionedObjectStateChangeRequest'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /api/v2/architecture/eventApiProductVersions/{eventApiProductVersionId}/memAssociations:
    post:
      tags:
      - Event API Products
      summary: (Beta) Associate gateway messaging service to event API product version
      description: Use this API to associate an event API product version and gateway
        messaging service.
      operationId: associateGatewayMessagingServiceToEAPVersion
      parameters:
      - name: eventApiProductVersionId
        in: path
        description: The ID of the event API product version to associate.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Gateway messaging service Id and supported Protocols
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GatewayMessagingService'
        required: true
      responses:
        "200":
          description: Associated GatewayMessagingService to event API product version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayMessagingServiceResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/applicationDomains/{applicationDomainId}/customAttributeDefinitions:
    get:
      tags:
      - Custom Attribute Definitions
      summary: Gets the custom attribute definition objects by Application domain
      description: Use this API to retrieve a list of custom attributes that match
        the given parameters.
      operationId: getCustomAttributeDefinitionsByApplicationDomain
      parameters:
      - name: applicationDomainId
        in: path
        description: 'Match only custom attribute definitions with the given application
          domain Id '
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pageSize
        in: query
        description: The number of custom attribute definitions to get per page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 20
      - name: pageNumber
        in: query
        description: The page number to get.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      responses:
        "200":
          description: Retrieve a list of custom attribute definitions of a given
            application domain id.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/CustomAttributeDefinitionsResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Custom Attribute Definitions
      summary: Creates a custom attribute definition object for provided application
        domain
      description: Use this API to create a custom attribute definition for provided
        application domain.
      operationId: createCustomAttributeDefinitionByApplicationDomain
      parameters:
      - name: applicationDomainId
        in: path
        description: The ID of the application domain
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The custom attribute object.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/CustomAttributeDefinition'
        required: true
      responses:
        "201":
          description: Created a custom attribute definition in provided application
            domain and Returns the newly saved custom attribute definition object
            in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/CustomAttributeDefinitionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - Custom Attribute Definitions
      summary: Deletes a custom attribute definition object by application domain
      description: Use this API to delete a custom attribute definition by given application
        domain.
      operationId: deleteCustomAttributeDefinitionByApplicationDomain
      parameters:
      - name: applicationDomainId
        in: path
        description: The ID of the application domain
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/eventApiProductVersions/{eventApiProductVersionId}/memAssociations/{memAssociationId}:
    delete:
      tags:
      - Event API Products
      summary: (Beta) Disassociate gateway messaging service from event API product
        version
      description: Use this API to disassociate an event API product version and gateway
        messaging service.
      operationId: disassociateGatewayMessagingServiceToEAPVersion
      parameters:
      - name: eventApiProductVersionId
        in: path
        description: The ID of the event API product version to disassociate.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: memAssociationId
        in: path
        description: The MEM association ID to dissociate from.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/architecture/applicationDomains/{applicationDomainId}/customAttributeDefinitions/{customAttributeId}:
    delete:
      tags:
      - Custom Attribute Definitions
      summary: Deletes a custom attribute definition object of application domain
      description: Use this API to delete a custom attribute definition of given application
        domain.
      operationId: deleteCustomAttributeDefinitionOfApplicationDomain
      parameters:
      - name: applicationDomainId
        in: path
        description: The ID of the application domain
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: customAttributeId
        in: path
        description: The ID of the custom attribute
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No content is returned.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - Custom Attribute Definitions
      summary: Updates a custom attribute definition object for provided application
        domain
      description: Use this API to update a custom attribute definition for provided
        application domain.
      operationId: updateCustomAttributeDefinitionByApplicationDomain
      parameters:
      - name: applicationDomainId
        in: path
        description: The ID of the application domain
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: customAttributeId
        in: path
        description: The ID of the custom attribute
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The custom attribute object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomAttributeDefinition'
        required: true
      responses:
        "201":
          description: Updated a custom attribute definition in provided application
            domain and Returns the newly saved custom attribute definition object
            in the response body.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/CustomAttributeDefinitionResponse'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "503":
          description: Service Unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "504":
          description: Gateway Timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    Address:
      required:
      - addressLevels
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        addressLevels:
          type: array
          items:
            $ref: '#/components/schemas/AddressLevel'
        addressType:
          type: string
          enum:
          - topic
        id:
          type: string
        type:
          type: string
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        createdBy: "12345678"
        changedBy: "12345678"
        addressType: topic
        createdTime: 2021-12-31T20:30:57.920Z
        id: id
        type: type
        addressLevels:
        - enumVersionId: enumVersionId
          name: root
          addressLevelType: literal
        - enumVersionId: enumVersionId
          name: root
          addressLevelType: literal
    AddressLevel:
      required:
      - addressLevelType
      - name
      type: object
      properties:
        name:
          type: string
          example: root
        addressLevelType:
          type: string
          enum:
          - literal
          - variable
        enumVersionId:
          type: string
      example:
        enumVersionId: enumVersionId
        name: root
        addressLevelType: literal
    AddressSpace:
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          readOnly: true
          example: "123456"
        brokerType:
          type: string
          example: kafka
        delimiter:
          type: string
          example: _
        type:
          type: string
          readOnly: true
    Application:
      required:
      - applicationDomainId
      - applicationType
      - brokerType
      - name
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          readOnly: true
          example: xyz23mwec2g
        name:
          maxLength: 60
          minLength: 1
          type: string
          example: My First Application
        applicationType:
          maxLength: 255
          minLength: 1
          type: string
          example: standard
        brokerType:
          maxLength: 255
          minLength: 1
          type: string
          example: solace
          enum:
          - kafka
          - solace
        applicationDomainId:
          type: string
          example: acb2j5k3mly
        numberOfVersions:
          type: integer
          format: int32
          readOnly: true
          example: 3
        customAttributes:
          type: array
          items:
            $ref: '#/components/schemas/CustomAttribute'
        type:
          type: string
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        applicationType: standard
        applicationDomainId: acb2j5k3mly
        createdBy: "12345678"
        changedBy: "12345678"
        name: My First Application
        brokerType: solace
        createdTime: 2021-12-31T20:30:57.920Z
        numberOfVersions: 3
        id: xyz23mwec2g
        type: type
        customAttributes:
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
    ApplicationDomain:
      required:
      - name
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          readOnly: true
          example: "12345678"
        name:
          maxLength: 255
          minLength: 1
          type: string
          example: My First Application Domain
        description:
          maxLength: 10000
          type: string
          example: Application Domain created by the Solace PubSub+ Cloud API documentation
        uniqueTopicAddressEnforcementEnabled:
          type: boolean
          description: Forces all topic addresses within the application domain to
            be unique.
          example: true
        topicDomainEnforcementEnabled:
          type: boolean
          description: Forces all topic addresses within the application domain to
            be prefixed with one of the application domain’s configured topic domains.
          example: false
        stats:
          $ref: '#/components/schemas/ApplicationDomainStats'
        customAttributes:
          type: array
          items:
            $ref: '#/components/schemas/CustomAttribute'
        type:
          type: string
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        createdBy: "12345678"
        uniqueTopicAddressEnforcementEnabled: true
        stats:
          applicationCount: 1
          enumCount: 5
          schemaCount: 0
          eventApiCount: 5
          eventCount: 6
          eventApiProductCount: 2
        changedBy: "12345678"
        name: My First Application Domain
        createdTime: 2021-12-31T20:30:57.920Z
        description: Application Domain created by the Solace PubSub+ Cloud API documentation
        topicDomainEnforcementEnabled: false
        id: "12345678"
        type: type
        customAttributes:
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
    ApplicationDomainExportDTO:
      type: object
      properties:
        formatVersion:
          type: string
        applicationDomains:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationDomain'
        topicDomains:
          type: array
          items:
            $ref: '#/components/schemas/TopicDomain'
        applications:
          type: array
          items:
            $ref: '#/components/schemas/Application'
        applicationVersions:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationVersion'
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        eventVersions:
          type: array
          items:
            $ref: '#/components/schemas/EventVersion'
        schemas:
          type: array
          items:
            $ref: '#/components/schemas/SchemaObject'
        schemaVersions:
          type: array
          items:
            $ref: '#/components/schemas/SchemaVersion'
        enums:
          type: array
          items:
            $ref: '#/components/schemas/TopicAddressEnum'
        enumVersions:
          type: array
          items:
            $ref: '#/components/schemas/TopicAddressEnumVersion'
        eventApis:
          type: array
          items:
            $ref: '#/components/schemas/EventApi'
        eventApiVersions:
          type: array
          items:
            $ref: '#/components/schemas/EventApiVersion'
        eventApiProducts:
          type: array
          items:
            $ref: '#/components/schemas/EventApiProduct'
        eventApiProductVersions:
          type: array
          items:
            $ref: '#/components/schemas/EventApiProductVersion'
        addressSpaces:
          type: array
          items:
            $ref: '#/components/schemas/AddressSpace'
    ApplicationDomainImportDTO:
      type: object
      properties:
        formatVersion:
          type: string
        applicationDomains:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationDomain'
        topicDomains:
          type: array
          items:
            $ref: '#/components/schemas/TopicDomain'
        applications:
          type: array
          items:
            $ref: '#/components/schemas/Application'
        applicationVersions:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationVersion'
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        eventVersions:
          type: array
          items:
            $ref: '#/components/schemas/EventVersion'
        schemas:
          type: array
          items:
            $ref: '#/components/schemas/SchemaObject'
        schemaVersions:
          type: array
          items:
            $ref: '#/components/schemas/SchemaVersion'
        enums:
          type: array
          items:
            $ref: '#/components/schemas/TopicAddressEnum'
        enumVersions:
          type: array
          items:
            $ref: '#/components/schemas/TopicAddressEnumVersion'
        eventApis:
          type: array
          items:
            $ref: '#/components/schemas/EventApi'
        eventApiVersions:
          type: array
          items:
            $ref: '#/components/schemas/EventApiVersion'
        eventApiProducts:
          type: array
          items:
            $ref: '#/components/schemas/EventApiProduct'
        eventApiProductVersions:
          type: array
          items:
            $ref: '#/components/schemas/EventApiProductVersion'
        addressSpaces:
          type: array
          items:
            $ref: '#/components/schemas/AddressSpace'
    ApplicationDomainResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ApplicationDomain'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          createdBy: "12345678"
          uniqueTopicAddressEnforcementEnabled: true
          stats:
            applicationCount: 1
            enumCount: 5
            schemaCount: 0
            eventApiCount: 5
            eventCount: 6
            eventApiProductCount: 2
          changedBy: "12345678"
          name: My First Application Domain
          createdTime: 2021-12-31T20:30:57.920Z
          description: Application Domain created by the Solace PubSub+ Cloud API
            documentation
          topicDomainEnforcementEnabled: false
          id: "12345678"
          type: type
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          key: {}
    ApplicationDomainStats:
      type: object
      properties:
        schemaCount:
          type: integer
          format: int32
        eventCount:
          type: integer
          format: int32
        applicationCount:
          type: integer
          format: int32
        enumCount:
          type: integer
          format: int32
        eventApiCount:
          type: integer
          format: int32
        eventApiProductCount:
          type: integer
          format: int32
      readOnly: true
      example:
        applicationCount: 1
        enumCount: 5
        schemaCount: 0
        eventApiCount: 5
        eventCount: 6
        eventApiProductCount: 2
    ApplicationDomainsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationDomain'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          createdBy: "12345678"
          uniqueTopicAddressEnforcementEnabled: true
          stats:
            applicationCount: 1
            enumCount: 5
            schemaCount: 0
            eventApiCount: 5
            eventCount: 6
            eventApiProductCount: 2
          changedBy: "12345678"
          name: My First Application Domain
          createdTime: 2021-12-31T20:30:57.920Z
          description: Application Domain created by the Solace PubSub+ Cloud API
            documentation
          topicDomainEnforcementEnabled: false
          id: "12345678"
          type: type
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        - updatedTime: 2021-12-31T20:30:57.920Z
          createdBy: "12345678"
          uniqueTopicAddressEnforcementEnabled: true
          stats:
            applicationCount: 1
            enumCount: 5
            schemaCount: 0
            eventApiCount: 5
            eventCount: 6
            eventApiProductCount: 2
          changedBy: "12345678"
          name: My First Application Domain
          createdTime: 2021-12-31T20:30:57.920Z
          description: Application Domain created by the Solace PubSub+ Cloud API
            documentation
          topicDomainEnforcementEnabled: false
          id: "12345678"
          type: type
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    ApplicationResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Application'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          applicationType: standard
          applicationDomainId: acb2j5k3mly
          createdBy: "12345678"
          changedBy: "12345678"
          name: My First Application
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          numberOfVersions: 3
          id: xyz23mwec2g
          type: type
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          key: {}
    ApplicationVersion:
      required:
      - applicationId
      - version
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          readOnly: true
          example: xyz23mwec2g
        applicationId:
          type: string
          example: acb2j5k3mly
        description:
          maxLength: 10000
          type: string
          example: Application created by Solace PubSub+ Cloud documentation
        version:
          type: string
          example: 1.0.0
        displayName:
          maxLength: 40
          type: string
          example: Display name for the version
        declaredProducedEventVersionIds:
          type: array
          items:
            type: string
            example: "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        declaredConsumedEventVersionIds:
          type: array
          items:
            type: string
            example: "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        declaredEventApiProductVersionIds:
          type: array
          items:
            type: string
            example: "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        stateId:
          type: string
          readOnly: true
          example: "1"
        eventMeshIds:
          type: array
          description: "*deprecationDate: 2022-12-01T00:00:00.000Z<br>removalDate:\
            \ 2023-12-01T00:00:00.000Z<br>reason: Application versions must now be\
            \ <a href=#/Applications/updateMessagingServiceAssociationForApplicationVersions>associated\
            \ to messaging services</a> instead of modeled event meshes.*<br>"
          deprecated: true
          items:
            type: string
            example: "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        consumers:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Consumer'
        customAttributes:
          type: array
          items:
            $ref: '#/components/schemas/CustomAttribute'
        messagingServiceIds:
          type: array
          readOnly: true
          items:
            type: string
            readOnly: true
            example: "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        type:
          type: string
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        displayName: Display name for the version
        declaredEventApiProductVersionIds:
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        stateId: "1"
        description: Application created by Solace PubSub+ Cloud documentation
        type: type
        version: 1.0.0
        messagingServiceIds:
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        declaredConsumedEventVersionIds:
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        createdBy: "12345678"
        changedBy: "12345678"
        declaredProducedEventVersionIds:
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        createdTime: 2021-12-31T20:30:57.920Z
        eventMeshIds:
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        consumers:
        - updatedTime: 2021-12-31T20:30:57.920Z
          consumerType: eventQueue
          subscriptions:
          - subscriptionType: topic
            attractedEventVersionIds:
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            value: solace/cloud
          - subscriptionType: topic
            attractedEventVersionIds:
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            value: solace/cloud
          createdBy: "12345678"
          changedBy: "12345678"
          name: My First Consumer
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          applicationVersionId: acb2j5k3mly
          type: type
        - updatedTime: 2021-12-31T20:30:57.920Z
          consumerType: eventQueue
          subscriptions:
          - subscriptionType: topic
            attractedEventVersionIds:
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            value: solace/cloud
          - subscriptionType: topic
            attractedEventVersionIds:
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            value: solace/cloud
          createdBy: "12345678"
          changedBy: "12345678"
          name: My First Consumer
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          applicationVersionId: acb2j5k3mly
          type: type
        id: xyz23mwec2g
        applicationId: acb2j5k3mly
        customAttributes:
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
    ApplicationVersionResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ApplicationVersion'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          displayName: Display name for the version
          declaredEventApiProductVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          stateId: "1"
          description: Application created by Solace PubSub+ Cloud documentation
          type: type
          version: 1.0.0
          messagingServiceIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          declaredConsumedEventVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          createdBy: "12345678"
          changedBy: "12345678"
          declaredProducedEventVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          createdTime: 2021-12-31T20:30:57.920Z
          eventMeshIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          consumers:
          - updatedTime: 2021-12-31T20:30:57.920Z
            consumerType: eventQueue
            subscriptions:
            - subscriptionType: topic
              attractedEventVersionIds:
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              value: solace/cloud
            - subscriptionType: topic
              attractedEventVersionIds:
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              value: solace/cloud
            createdBy: "12345678"
            changedBy: "12345678"
            name: My First Consumer
            brokerType: solace
            createdTime: 2021-12-31T20:30:57.920Z
            id: xyz23mwec2g
            applicationVersionId: acb2j5k3mly
            type: type
          - updatedTime: 2021-12-31T20:30:57.920Z
            consumerType: eventQueue
            subscriptions:
            - subscriptionType: topic
              attractedEventVersionIds:
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              value: solace/cloud
            - subscriptionType: topic
              attractedEventVersionIds:
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              value: solace/cloud
            createdBy: "12345678"
            changedBy: "12345678"
            name: My First Consumer
            brokerType: solace
            createdTime: 2021-12-31T20:30:57.920Z
            id: xyz23mwec2g
            applicationVersionId: acb2j5k3mly
            type: type
          id: xyz23mwec2g
          applicationId: acb2j5k3mly
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          key: {}
    ApplicationVersionsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationVersion'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          displayName: Display name for the version
          declaredEventApiProductVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          stateId: "1"
          description: Application created by Solace PubSub+ Cloud documentation
          type: type
          version: 1.0.0
          messagingServiceIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          declaredConsumedEventVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          createdBy: "12345678"
          changedBy: "12345678"
          declaredProducedEventVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          createdTime: 2021-12-31T20:30:57.920Z
          eventMeshIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          consumers:
          - updatedTime: 2021-12-31T20:30:57.920Z
            consumerType: eventQueue
            subscriptions:
            - subscriptionType: topic
              attractedEventVersionIds:
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              value: solace/cloud
            - subscriptionType: topic
              attractedEventVersionIds:
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              value: solace/cloud
            createdBy: "12345678"
            changedBy: "12345678"
            name: My First Consumer
            brokerType: solace
            createdTime: 2021-12-31T20:30:57.920Z
            id: xyz23mwec2g
            applicationVersionId: acb2j5k3mly
            type: type
          - updatedTime: 2021-12-31T20:30:57.920Z
            consumerType: eventQueue
            subscriptions:
            - subscriptionType: topic
              attractedEventVersionIds:
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              value: solace/cloud
            - subscriptionType: topic
              attractedEventVersionIds:
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              value: solace/cloud
            createdBy: "12345678"
            changedBy: "12345678"
            name: My First Consumer
            brokerType: solace
            createdTime: 2021-12-31T20:30:57.920Z
            id: xyz23mwec2g
            applicationVersionId: acb2j5k3mly
            type: type
          id: xyz23mwec2g
          applicationId: acb2j5k3mly
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        - updatedTime: 2021-12-31T20:30:57.920Z
          displayName: Display name for the version
          declaredEventApiProductVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          stateId: "1"
          description: Application created by Solace PubSub+ Cloud documentation
          type: type
          version: 1.0.0
          messagingServiceIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          declaredConsumedEventVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          createdBy: "12345678"
          changedBy: "12345678"
          declaredProducedEventVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          createdTime: 2021-12-31T20:30:57.920Z
          eventMeshIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          consumers:
          - updatedTime: 2021-12-31T20:30:57.920Z
            consumerType: eventQueue
            subscriptions:
            - subscriptionType: topic
              attractedEventVersionIds:
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              value: solace/cloud
            - subscriptionType: topic
              attractedEventVersionIds:
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              value: solace/cloud
            createdBy: "12345678"
            changedBy: "12345678"
            name: My First Consumer
            brokerType: solace
            createdTime: 2021-12-31T20:30:57.920Z
            id: xyz23mwec2g
            applicationVersionId: acb2j5k3mly
            type: type
          - updatedTime: 2021-12-31T20:30:57.920Z
            consumerType: eventQueue
            subscriptions:
            - subscriptionType: topic
              attractedEventVersionIds:
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              value: solace/cloud
            - subscriptionType: topic
              attractedEventVersionIds:
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              - eventVersionId: eventVersionId
                eventMeshIds:
                - eventMeshIds
                - eventMeshIds
              value: solace/cloud
            createdBy: "12345678"
            changedBy: "12345678"
            name: My First Consumer
            brokerType: solace
            createdTime: 2021-12-31T20:30:57.920Z
            id: xyz23mwec2g
            applicationVersionId: acb2j5k3mly
            type: type
          id: xyz23mwec2g
          applicationId: acb2j5k3mly
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    ApplicationsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Application'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          applicationType: standard
          applicationDomainId: acb2j5k3mly
          createdBy: "12345678"
          changedBy: "12345678"
          name: My First Application
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          numberOfVersions: 3
          id: xyz23mwec2g
          type: type
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        - updatedTime: 2021-12-31T20:30:57.920Z
          applicationType: standard
          applicationDomainId: acb2j5k3mly
          createdBy: "12345678"
          changedBy: "12345678"
          name: My First Application
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          numberOfVersions: 3
          id: xyz23mwec2g
          type: type
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    AssociatedEntity:
      type: object
      properties:
        entityType:
          type: string
        applicationDomainIds:
          type: array
          items:
            type: string
      example:
        entityType: entityType
        applicationDomainIds:
        - applicationDomainIds
        - applicationDomainIds
    AttractedEventVersionTuple:
      type: object
      properties:
        eventVersionId:
          type: string
        eventMeshIds:
          uniqueItems: true
          type: array
          items:
            type: string
      readOnly: true
      example:
        eventVersionId: eventVersionId
        eventMeshIds:
        - eventMeshIds
        - eventMeshIds
    AttractingApplicationVersionTuple:
      type: object
      properties:
        applicationVersionId:
          type: string
        eventMeshIds:
          uniqueItems: true
          type: array
          items:
            type: string
      readOnly: true
      example:
        eventMeshIds:
        - eventMeshIds
        - eventMeshIds
        applicationVersionId: applicationVersionId
    BaseMessagingServiceDTO:
      type: object
      properties:
        id:
          type: string
          description: ID value of the object
          readOnly: true
          example: "123456"
        messagingServiceId:
          type: string
          description: ID of the Event Portal messaging service
          readOnly: true
          example: "456789"
        messagingServiceName:
          type: string
          description: Name of the Event Portal messaging service
          readOnly: true
          example: Messaging Service
        supportedProtocols:
          type: array
          description: Values for allowed supported protocols
          items:
            type: string
            description: Values for allowed supported protocols
        environmentId:
          type: string
          readOnly: true
          example: xyz23mwec2g
        environmentName:
          type: string
          readOnly: true
          example: Production
        eventMeshId:
          type: string
          readOnly: true
          example: xyz23mwec2y
        eventMeshName:
          type: string
          readOnly: true
          example: US East Mesh
        type:
          type: string
      discriminator:
        propertyName: type
    BasePolicyDTO:
      type: object
      properties:
        id:
          type: string
          description: ID value of the object
          readOnly: true
          example: "123456"
        type:
          type: string
      discriminator:
        propertyName: type
    Configuration:
      required:
      - configurationTypeId
      - entityId
      - entityType
      - messagingServiceId
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          readOnly: true
          example: xyz23mwec2g
        messagingServiceId:
          type: string
          example: acb2j5k3mly
        configurationTypeId:
          type: string
          description: Refer <a href="#/Configuration%20Types/getConfigurationTypes">here</a>
            for details on configuration types.
          example: v0u717y2oiy
        entityType:
          maxLength: 255
          minLength: 1
          type: string
          example: consumer
          enum:
          - applicationVersion
          - consumer
          - eventVersion
        entityId:
          type: string
          example: acb2j5k3mly
        value:
          type: object
          additionalProperties:
            type: object
        type:
          type: string
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        createdBy: "12345678"
        configurationTypeId: v0u717y2oiy
        changedBy: "12345678"
        entityType: consumer
        createdTime: 2021-12-31T20:30:57.920Z
        entityId: acb2j5k3mly
        id: xyz23mwec2g
        messagingServiceId: acb2j5k3mly
        type: type
        value:
          key: {}
    ConfigurationResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Configuration'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          createdBy: "12345678"
          configurationTypeId: v0u717y2oiy
          changedBy: "12345678"
          entityType: consumer
          createdTime: 2021-12-31T20:30:57.920Z
          entityId: acb2j5k3mly
          id: xyz23mwec2g
          messagingServiceId: acb2j5k3mly
          type: type
          value:
            key: {}
        meta:
          key: {}
    ConfigurationType:
      required:
      - brokerType
      - name
      type: object
      properties:
        id:
          type: string
          readOnly: true
          example: xyz23mwec2g
        name:
          maxLength: 255
          minLength: 1
          type: string
          example: solaceQueue
        brokerType:
          maxLength: 255
          minLength: 1
          type: string
          example: solace
        associatedEntityTypes:
          type: array
          items:
            type: string
            example: "[\"eventVersion\",\"applicationVersion\",\"consumer\"]"
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        valueSchema:
          type: object
          additionalProperties:
            type: object
        type:
          type: string
      example:
        valueSchema:
          key: {}
        updatedTime: 2021-12-31T20:30:57.920Z
        associatedEntityTypes:
        - "[\"eventVersion\",\"applicationVersion\",\"consumer\"]"
        - "[\"eventVersion\",\"applicationVersion\",\"consumer\"]"
        name: solaceQueue
        brokerType: solace
        createdTime: 2021-12-31T20:30:57.920Z
        id: xyz23mwec2g
        type: type
    ConfigurationTypeResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ConfigurationType'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          valueSchema:
            key: {}
          updatedTime: 2021-12-31T20:30:57.920Z
          associatedEntityTypes:
          - "[\"eventVersion\",\"applicationVersion\",\"consumer\"]"
          - "[\"eventVersion\",\"applicationVersion\",\"consumer\"]"
          name: solaceQueue
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          type: type
        meta:
          key: {}
    ConfigurationTypesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ConfigurationType'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - valueSchema:
            key: {}
          updatedTime: 2021-12-31T20:30:57.920Z
          associatedEntityTypes:
          - "[\"eventVersion\",\"applicationVersion\",\"consumer\"]"
          - "[\"eventVersion\",\"applicationVersion\",\"consumer\"]"
          name: solaceQueue
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          type: type
        - valueSchema:
            key: {}
          updatedTime: 2021-12-31T20:30:57.920Z
          associatedEntityTypes:
          - "[\"eventVersion\",\"applicationVersion\",\"consumer\"]"
          - "[\"eventVersion\",\"applicationVersion\",\"consumer\"]"
          name: solaceQueue
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          type: type
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    ConfigurationsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Configuration'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          createdBy: "12345678"
          configurationTypeId: v0u717y2oiy
          changedBy: "12345678"
          entityType: consumer
          createdTime: 2021-12-31T20:30:57.920Z
          entityId: acb2j5k3mly
          id: xyz23mwec2g
          messagingServiceId: acb2j5k3mly
          type: type
          value:
            key: {}
        - updatedTime: 2021-12-31T20:30:57.920Z
          createdBy: "12345678"
          configurationTypeId: v0u717y2oiy
          changedBy: "12345678"
          entityType: consumer
          createdTime: 2021-12-31T20:30:57.920Z
          entityId: acb2j5k3mly
          id: xyz23mwec2g
          messagingServiceId: acb2j5k3mly
          type: type
          value:
            key: {}
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    Consumer:
      required:
      - applicationVersionId
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          readOnly: true
          example: xyz23mwec2g
        name:
          maxLength: 255
          minLength: 1
          type: string
          example: My First Consumer
        applicationVersionId:
          type: string
          example: acb2j5k3mly
        brokerType:
          type: string
          example: solace
        consumerType:
          type: string
          example: eventQueue
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/Subscription'
        type:
          type: string
      readOnly: true
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        consumerType: eventQueue
        subscriptions:
        - subscriptionType: topic
          attractedEventVersionIds:
          - eventVersionId: eventVersionId
            eventMeshIds:
            - eventMeshIds
            - eventMeshIds
          - eventVersionId: eventVersionId
            eventMeshIds:
            - eventMeshIds
            - eventMeshIds
          value: solace/cloud
        - subscriptionType: topic
          attractedEventVersionIds:
          - eventVersionId: eventVersionId
            eventMeshIds:
            - eventMeshIds
            - eventMeshIds
          - eventVersionId: eventVersionId
            eventMeshIds:
            - eventMeshIds
            - eventMeshIds
          value: solace/cloud
        createdBy: "12345678"
        changedBy: "12345678"
        name: My First Consumer
        brokerType: solace
        createdTime: 2021-12-31T20:30:57.920Z
        id: xyz23mwec2g
        applicationVersionId: acb2j5k3mly
        type: type
    ConsumerResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Consumer'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          consumerType: eventQueue
          subscriptions:
          - subscriptionType: topic
            attractedEventVersionIds:
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            value: solace/cloud
          - subscriptionType: topic
            attractedEventVersionIds:
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            value: solace/cloud
          createdBy: "12345678"
          changedBy: "12345678"
          name: My First Consumer
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          applicationVersionId: acb2j5k3mly
          type: type
        meta:
          key: {}
    ConsumersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Consumer'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          consumerType: eventQueue
          subscriptions:
          - subscriptionType: topic
            attractedEventVersionIds:
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            value: solace/cloud
          - subscriptionType: topic
            attractedEventVersionIds:
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            value: solace/cloud
          createdBy: "12345678"
          changedBy: "12345678"
          name: My First Consumer
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          applicationVersionId: acb2j5k3mly
          type: type
        - updatedTime: 2021-12-31T20:30:57.920Z
          consumerType: eventQueue
          subscriptions:
          - subscriptionType: topic
            attractedEventVersionIds:
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            value: solace/cloud
          - subscriptionType: topic
            attractedEventVersionIds:
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            - eventVersionId: eventVersionId
              eventMeshIds:
              - eventMeshIds
              - eventMeshIds
            value: solace/cloud
          createdBy: "12345678"
          changedBy: "12345678"
          name: My First Consumer
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          applicationVersionId: acb2j5k3mly
          type: type
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    CustomAttribute:
      type: object
      properties:
        customAttributeDefinitionId:
          type: string
          example: acb2j5k3mly
        customAttributeDefinitionName:
          pattern: a-zA-Z0-9_\-\.
          type: string
          example: color
        value:
          type: object
          description: "Valid Objects are Strings with characters: [a-zA-Z0-9_\\-\\\
            . ]"
          example: red
      example:
        customAttributeDefinitionName: color
        customAttributeDefinitionId: acb2j5k3mly
        value: red
    CustomAttributeDefinition:
      required:
      - scope
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
        name:
          pattern: "[a-zA-Z0-9\\._-]+"
          type: string
          example: colour
        valueType:
          type: string
          enum:
          - STRING
        scope:
          type: string
          enum:
          - organization
          - applicationDomain
        associatedEntityTypes:
          type: array
          items:
            type: string
            example: "[\"event\",\"application\"]"
        associatedEntities:
          type: array
          items:
            $ref: '#/components/schemas/AssociatedEntity'
        type:
          type: string
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        associatedEntities:
        - entityType: entityType
          applicationDomainIds:
          - applicationDomainIds
          - applicationDomainIds
        - entityType: entityType
          applicationDomainIds:
          - applicationDomainIds
          - applicationDomainIds
        createdBy: "12345678"
        changedBy: "12345678"
        valueType: STRING
        scope: organization
        associatedEntityTypes:
        - "[\"event\",\"application\"]"
        - "[\"event\",\"application\"]"
        name: colour
        createdTime: 2021-12-31T20:30:57.920Z
        id: id
        type: type
    CustomAttributeDefinitionResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CustomAttributeDefinition'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          associatedEntities:
          - entityType: entityType
            applicationDomainIds:
            - applicationDomainIds
            - applicationDomainIds
          - entityType: entityType
            applicationDomainIds:
            - applicationDomainIds
            - applicationDomainIds
          createdBy: "12345678"
          changedBy: "12345678"
          valueType: STRING
          scope: organization
          associatedEntityTypes:
          - "[\"event\",\"application\"]"
          - "[\"event\",\"application\"]"
          name: colour
          createdTime: 2021-12-31T20:30:57.920Z
          id: id
          type: type
        meta:
          key: {}
    CustomAttributeDefinitionsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CustomAttributeDefinition'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          associatedEntities:
          - entityType: entityType
            applicationDomainIds:
            - applicationDomainIds
            - applicationDomainIds
          - entityType: entityType
            applicationDomainIds:
            - applicationDomainIds
            - applicationDomainIds
          createdBy: "12345678"
          changedBy: "12345678"
          valueType: STRING
          scope: organization
          associatedEntityTypes:
          - "[\"event\",\"application\"]"
          - "[\"event\",\"application\"]"
          name: colour
          createdTime: 2021-12-31T20:30:57.920Z
          id: id
          type: type
        - updatedTime: 2021-12-31T20:30:57.920Z
          associatedEntities:
          - entityType: entityType
            applicationDomainIds:
            - applicationDomainIds
            - applicationDomainIds
          - entityType: entityType
            applicationDomainIds:
            - applicationDomainIds
            - applicationDomainIds
          createdBy: "12345678"
          changedBy: "12345678"
          valueType: STRING
          scope: organization
          associatedEntityTypes:
          - "[\"event\",\"application\"]"
          - "[\"event\",\"application\"]"
          name: colour
          createdTime: 2021-12-31T20:30:57.920Z
          id: id
          type: type
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    DeliveryDescriptor:
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        brokerType:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        keySchemaVersionId:
          type: string
          example: shb3mlyec2g
        keySchemaPrimitiveType:
          type: string
          example: BYTES
          enum:
          - BOOLEAN
          - BYTES
          - DOUBLE
          - FLOAT
          - INT
          - LONG
          - "NULL"
          - NUMBER
          - STRING
        id:
          type: string
        type:
          type: string
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        address:
          updatedTime: 2021-12-31T20:30:57.920Z
          createdBy: "12345678"
          changedBy: "12345678"
          addressType: topic
          createdTime: 2021-12-31T20:30:57.920Z
          id: id
          type: type
          addressLevels:
          - enumVersionId: enumVersionId
            name: root
            addressLevelType: literal
          - enumVersionId: enumVersionId
            name: root
            addressLevelType: literal
        keySchemaVersionId: shb3mlyec2g
        createdBy: "12345678"
        keySchemaPrimitiveType: BYTES
        changedBy: "12345678"
        brokerType: brokerType
        createdTime: 2021-12-31T20:30:57.920Z
        id: id
        type: type
    Environment:
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          readOnly: true
          example: xyz123abc
        name:
          maxLength: 50
          minLength: 1
          type: string
          example: Staging environment
        description:
          maxLength: 10000
          minLength: 1
          type: string
          example: The description of my environment
        revision:
          type: integer
          format: int32
        numberOfEventMeshes:
          type: integer
          format: int32
        type:
          type: string
          readOnly: true
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        numberOfEventMeshes: 6
        createdBy: "12345678"
        changedBy: "12345678"
        name: Staging environment
        createdTime: 2021-12-31T20:30:57.920Z
        description: The description of my environment
        id: xyz123abc
        type: type
        revision: 0
    EnvironmentResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Environment'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          numberOfEventMeshes: 6
          createdBy: "12345678"
          changedBy: "12345678"
          name: Staging environment
          createdTime: 2021-12-31T20:30:57.920Z
          description: The description of my environment
          id: xyz123abc
          type: type
          revision: 0
        meta:
          key: {}
    EnvironmentsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Environment'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          numberOfEventMeshes: 6
          createdBy: "12345678"
          changedBy: "12345678"
          name: Staging environment
          createdTime: 2021-12-31T20:30:57.920Z
          description: The description of my environment
          id: xyz123abc
          type: type
          revision: 0
        - updatedTime: 2021-12-31T20:30:57.920Z
          numberOfEventMeshes: 6
          createdBy: "12345678"
          changedBy: "12345678"
          name: Staging environment
          createdTime: 2021-12-31T20:30:57.920Z
          description: The description of my environment
          id: xyz123abc
          type: type
          revision: 0
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: An error occurred
        errorId:
          type: string
          example: 123e4567-e89b-12d3-a456-426655440000
        meta:
          type: object
          additionalProperties:
            type: object
            example: "'object': { 'field': 'description' }"
          example: "'object': { 'field': 'description' }"
        validationDetails:
          type: object
          additionalProperties:
            type: array
            example: "'name': ['Not unique']"
            items:
              type: string
              example: "'name': ['Not unique']"
          example: "'name': ['Not unique']"
        errorType:
          type: string
          writeOnly: true
      discriminator:
        propertyName: errorType
    Event:
      required:
      - applicationDomainId
      - name
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          readOnly: true
          example: xyz23mwec2g
        name:
          maxLength: 60
          minLength: 1
          type: string
          example: My First Event
        shared:
          type: boolean
          example: false
        applicationDomainId:
          type: string
          example: acb2j5k3mly
        numberOfVersions:
          type: integer
          format: int32
          readOnly: true
        customAttributes:
          type: array
          items:
            $ref: '#/components/schemas/CustomAttribute'
        type:
          type: string
          readOnly: true
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        shared: false
        applicationDomainId: acb2j5k3mly
        createdBy: "12345678"
        changedBy: "12345678"
        name: My First Event
        createdTime: 2021-12-31T20:30:57.920Z
        numberOfVersions: 0
        id: xyz23mwec2g
        type: type
        customAttributes:
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
    EventApi:
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          description: Primary key set by the server.
          readOnly: true
          example: "12345"
        name:
          maxLength: 60
          minLength: 1
          type: string
          description: The name of the event api.
          example: Apitest
        shared:
          type: boolean
          example: true
        applicationDomainId:
          type: string
          example: acb2j5k3mly
        numberOfVersions:
          type: integer
          format: int32
          readOnly: true
          example: 3
        brokerType:
          type: string
          description: The type of the broker used for the event API
          enum:
          - kafka
          - solace
          default: solace
        customAttributes:
          type: array
          items:
            $ref: '#/components/schemas/CustomAttribute'
        type:
          type: string
          description: "The type of this payload, eventApi."
          readOnly: true
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        shared: true
        applicationDomainId: acb2j5k3mly
        createdBy: "12345678"
        changedBy: "12345678"
        name: Apitest
        brokerType: solace
        createdTime: 2021-12-31T20:30:57.920Z
        numberOfVersions: 3
        id: "12345"
        type: type
        customAttributes:
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
    EventApiProduct:
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          description: Primary key set by the server
          readOnly: true
          example: "12345"
        name:
          maxLength: 60
          minLength: 1
          type: string
          description: The name of the event API product
          example: EventApiProductTest
        applicationDomainId:
          type: string
          example: abcappdomainid
        shared:
          type: boolean
          example: true
        numberOfVersions:
          type: integer
          format: int32
          readOnly: true
          example: 3
        brokerType:
          type: string
          description: The type of the broker used for the event API product
          enum:
          - kafka
          - solace
          default: solace
        customAttributes:
          type: array
          items:
            $ref: '#/components/schemas/CustomAttribute'
        type:
          type: string
          description: The type of payload
          readOnly: true
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        shared: true
        applicationDomainId: abcappdomainid
        createdBy: "12345678"
        changedBy: "12345678"
        name: EventApiProductTest
        brokerType: solace
        createdTime: 2021-12-31T20:30:57.920Z
        numberOfVersions: 3
        id: "12345"
        type: type
        customAttributes:
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
    EventApiProductRegistration:
      required:
      - accessRequestId
      - applicationDomainId
      - eventApiProductVersionId
      - planId
      - registrationId
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          readOnly: true
          example: xyz23mwec2g
        applicationDomainId:
          type: string
          example: "12345678"
        registrationId:
          type: string
          example: "12345678"
        accessRequestId:
          type: string
          example: "12345678"
        eventApiProductVersionId:
          type: string
          example: "12345678"
        planId:
          type: string
          example: "12345678"
        state:
          type: string
          enum:
          - Pending Approval
          - Rejected
          - Revoked
          - Approved
          - Error
          - Live
        type:
          type: string
          description: The type of payload
          readOnly: true
          default: eventApiProductRegistration
        customAttributes:
          type: object
          additionalProperties:
            type: string
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        eventApiProductVersionId: "12345678"
        type: eventApiProductRegistration
        applicationDomainId: "12345678"
        accessRequestId: "12345678"
        createdBy: "12345678"
        changedBy: "12345678"
        registrationId: "12345678"
        createdTime: 2021-12-31T20:30:57.920Z
        planId: "12345678"
        id: xyz23mwec2g
        state: Pending Approval
        customAttributes:
          key: customAttributes
    EventApiProductResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/EventApiProduct'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          shared: true
          applicationDomainId: abcappdomainid
          createdBy: "12345678"
          changedBy: "12345678"
          name: EventApiProductTest
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          numberOfVersions: 3
          id: "12345"
          type: type
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          key: {}
    EventApiProductVersion:
      required:
      - eventApiProductId
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          readOnly: true
          example: xyz23mwec2g
        eventApiProductId:
          type: string
          example: acb2j5k3mly
        description:
          maxLength: 10000
          type: string
          example: Event API product created by Solace PubSub+ Cloud documentation
        version:
          type: string
          example: 1.0.0
        summary:
          type: string
          example: Summary string value of event API product version
        customAttributes:
          type: array
          items:
            $ref: '#/components/schemas/CustomAttribute'
        displayName:
          maxLength: 40
          type: string
          example: Display name for the event API product version
        eventApiVersionIds:
          type: array
          description: List of IDs of associated event API versions
          items:
            type: string
            description: List of IDs of associated event API versions
        stateId:
          type: string
          example: "1"
        eventApiProductRegistrations:
          type: array
          items:
            $ref: '#/components/schemas/EventApiProductRegistration'
        plans:
          type: array
          items:
            $ref: '#/components/schemas/Plan'
        solaceMessagingServices:
          type: array
          description: Solace Messaging Services
          items:
            $ref: '#/components/schemas/SolaceMessagingService'
        filters:
          type: array
          description: List of filters that contains eventVersionId name and variables
          items:
            $ref: '#/components/schemas/Filter'
        approvalType:
          type: string
          description: Approval type
          enum:
          - automatic
          - manual
          - automatic
          - manual
          default: automatic
        type:
          type: string
          description: The type of payload
          readOnly: true
      example:
        summary: Summary string value of event API product version
        updatedTime: 2021-12-31T20:30:57.920Z
        eventApiProductRegistrations:
        - updatedTime: 2021-12-31T20:30:57.920Z
          eventApiProductVersionId: "12345678"
          type: eventApiProductRegistration
          applicationDomainId: "12345678"
          accessRequestId: "12345678"
          createdBy: "12345678"
          changedBy: "12345678"
          registrationId: "12345678"
          createdTime: 2021-12-31T20:30:57.920Z
          planId: "12345678"
          id: xyz23mwec2g
          state: Pending Approval
          customAttributes:
            key: customAttributes
        - updatedTime: 2021-12-31T20:30:57.920Z
          eventApiProductVersionId: "12345678"
          type: eventApiProductRegistration
          applicationDomainId: "12345678"
          accessRequestId: "12345678"
          createdBy: "12345678"
          changedBy: "12345678"
          registrationId: "12345678"
          createdTime: 2021-12-31T20:30:57.920Z
          planId: "12345678"
          id: xyz23mwec2g
          state: Pending Approval
          customAttributes:
            key: customAttributes
        displayName: Display name for the event API product version
        stateId: "1"
        approvalType: automatic
        description: Event API product created by Solace PubSub+ Cloud documentation
        filters:
        - eventVersionId: "123456"
          topicFilters:
          - updatedTime: 2021-12-31T20:30:57.920Z
            filterValue: " Tes?, TEST*FILTER, SAmPle"
            eventVersionIds:
            - eventVersionIds
            - eventVersionIds
            createdBy: "12345678"
            changedBy: "12345678"
            name: name
            createdTime: 2021-12-31T20:30:57.920Z
            type: topicFilter
          - updatedTime: 2021-12-31T20:30:57.920Z
            filterValue: " Tes?, TEST*FILTER, SAmPle"
            eventVersionIds:
            - eventVersionIds
            - eventVersionIds
            createdBy: "12345678"
            changedBy: "12345678"
            name: name
            createdTime: 2021-12-31T20:30:57.920Z
            type: topicFilter
          id: id
          type: filter
        - eventVersionId: "123456"
          topicFilters:
          - updatedTime: 2021-12-31T20:30:57.920Z
            filterValue: " Tes?, TEST*FILTER, SAmPle"
            eventVersionIds:
            - eventVersionIds
            - eventVersionIds
            createdBy: "12345678"
            changedBy: "12345678"
            name: name
            createdTime: 2021-12-31T20:30:57.920Z
            type: topicFilter
          - updatedTime: 2021-12-31T20:30:57.920Z
            filterValue: " Tes?, TEST*FILTER, SAmPle"
            eventVersionIds:
            - eventVersionIds
            - eventVersionIds
            createdBy: "12345678"
            changedBy: "12345678"
            name: name
            createdTime: 2021-12-31T20:30:57.920Z
            type: topicFilter
          id: id
          type: filter
        eventApiProductId: acb2j5k3mly
        type: type
        version: 1.0.0
        eventApiVersionIds:
        - eventApiVersionIds
        - eventApiVersionIds
        createdBy: "12345678"
        changedBy: "12345678"
        plans:
        - name: Gold
          solaceClassOfServicePolicy: ""
          id: "123456"
          type: plan
        - name: Gold
          solaceClassOfServicePolicy: ""
          id: "123456"
          type: plan
        solaceMessagingServices:
        - ""
        - ""
        createdTime: 2021-12-31T20:30:57.920Z
        id: xyz23mwec2g
        customAttributes:
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
    EventApiProductVersionResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/EventApiProductVersion'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          summary: Summary string value of event API product version
          updatedTime: 2021-12-31T20:30:57.920Z
          eventApiProductRegistrations:
          - updatedTime: 2021-12-31T20:30:57.920Z
            eventApiProductVersionId: "12345678"
            type: eventApiProductRegistration
            applicationDomainId: "12345678"
            accessRequestId: "12345678"
            createdBy: "12345678"
            changedBy: "12345678"
            registrationId: "12345678"
            createdTime: 2021-12-31T20:30:57.920Z
            planId: "12345678"
            id: xyz23mwec2g
            state: Pending Approval
            customAttributes:
              key: customAttributes
          - updatedTime: 2021-12-31T20:30:57.920Z
            eventApiProductVersionId: "12345678"
            type: eventApiProductRegistration
            applicationDomainId: "12345678"
            accessRequestId: "12345678"
            createdBy: "12345678"
            changedBy: "12345678"
            registrationId: "12345678"
            createdTime: 2021-12-31T20:30:57.920Z
            planId: "12345678"
            id: xyz23mwec2g
            state: Pending Approval
            customAttributes:
              key: customAttributes
          displayName: Display name for the event API product version
          stateId: "1"
          approvalType: automatic
          description: Event API product created by Solace PubSub+ Cloud documentation
          filters:
          - eventVersionId: "123456"
            topicFilters:
            - updatedTime: 2021-12-31T20:30:57.920Z
              filterValue: " Tes?, TEST*FILTER, SAmPle"
              eventVersionIds:
              - eventVersionIds
              - eventVersionIds
              createdBy: "12345678"
              changedBy: "12345678"
              name: name
              createdTime: 2021-12-31T20:30:57.920Z
              type: topicFilter
            - updatedTime: 2021-12-31T20:30:57.920Z
              filterValue: " Tes?, TEST*FILTER, SAmPle"
              eventVersionIds:
              - eventVersionIds
              - eventVersionIds
              createdBy: "12345678"
              changedBy: "12345678"
              name: name
              createdTime: 2021-12-31T20:30:57.920Z
              type: topicFilter
            id: id
            type: filter
          - eventVersionId: "123456"
            topicFilters:
            - updatedTime: 2021-12-31T20:30:57.920Z
              filterValue: " Tes?, TEST*FILTER, SAmPle"
              eventVersionIds:
              - eventVersionIds
              - eventVersionIds
              createdBy: "12345678"
              changedBy: "12345678"
              name: name
              createdTime: 2021-12-31T20:30:57.920Z
              type: topicFilter
            - updatedTime: 2021-12-31T20:30:57.920Z
              filterValue: " Tes?, TEST*FILTER, SAmPle"
              eventVersionIds:
              - eventVersionIds
              - eventVersionIds
              createdBy: "12345678"
              changedBy: "12345678"
              name: name
              createdTime: 2021-12-31T20:30:57.920Z
              type: topicFilter
            id: id
            type: filter
          eventApiProductId: acb2j5k3mly
          type: type
          version: 1.0.0
          eventApiVersionIds:
          - eventApiVersionIds
          - eventApiVersionIds
          createdBy: "12345678"
          changedBy: "12345678"
          plans:
          - name: Gold
            solaceClassOfServicePolicy: ""
            id: "123456"
            type: plan
          - name: Gold
            solaceClassOfServicePolicy: ""
            id: "123456"
            type: plan
          solaceMessagingServices:
          - ""
          - ""
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          key: {}
    EventApiProductVersionsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventApiProductVersion'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - summary: Summary string value of event API product version
          updatedTime: 2021-12-31T20:30:57.920Z
          eventApiProductRegistrations:
          - updatedTime: 2021-12-31T20:30:57.920Z
            eventApiProductVersionId: "12345678"
            type: eventApiProductRegistration
            applicationDomainId: "12345678"
            accessRequestId: "12345678"
            createdBy: "12345678"
            changedBy: "12345678"
            registrationId: "12345678"
            createdTime: 2021-12-31T20:30:57.920Z
            planId: "12345678"
            id: xyz23mwec2g
            state: Pending Approval
            customAttributes:
              key: customAttributes
          - updatedTime: 2021-12-31T20:30:57.920Z
            eventApiProductVersionId: "12345678"
            type: eventApiProductRegistration
            applicationDomainId: "12345678"
            accessRequestId: "12345678"
            createdBy: "12345678"
            changedBy: "12345678"
            registrationId: "12345678"
            createdTime: 2021-12-31T20:30:57.920Z
            planId: "12345678"
            id: xyz23mwec2g
            state: Pending Approval
            customAttributes:
              key: customAttributes
          displayName: Display name for the event API product version
          stateId: "1"
          approvalType: automatic
          description: Event API product created by Solace PubSub+ Cloud documentation
          filters:
          - eventVersionId: "123456"
            topicFilters:
            - updatedTime: 2021-12-31T20:30:57.920Z
              filterValue: " Tes?, TEST*FILTER, SAmPle"
              eventVersionIds:
              - eventVersionIds
              - eventVersionIds
              createdBy: "12345678"
              changedBy: "12345678"
              name: name
              createdTime: 2021-12-31T20:30:57.920Z
              type: topicFilter
            - updatedTime: 2021-12-31T20:30:57.920Z
              filterValue: " Tes?, TEST*FILTER, SAmPle"
              eventVersionIds:
              - eventVersionIds
              - eventVersionIds
              createdBy: "12345678"
              changedBy: "12345678"
              name: name
              createdTime: 2021-12-31T20:30:57.920Z
              type: topicFilter
            id: id
            type: filter
          - eventVersionId: "123456"
            topicFilters:
            - updatedTime: 2021-12-31T20:30:57.920Z
              filterValue: " Tes?, TEST*FILTER, SAmPle"
              eventVersionIds:
              - eventVersionIds
              - eventVersionIds
              createdBy: "12345678"
              changedBy: "12345678"
              name: name
              createdTime: 2021-12-31T20:30:57.920Z
              type: topicFilter
            - updatedTime: 2021-12-31T20:30:57.920Z
              filterValue: " Tes?, TEST*FILTER, SAmPle"
              eventVersionIds:
              - eventVersionIds
              - eventVersionIds
              createdBy: "12345678"
              changedBy: "12345678"
              name: name
              createdTime: 2021-12-31T20:30:57.920Z
              type: topicFilter
            id: id
            type: filter
          eventApiProductId: acb2j5k3mly
          type: type
          version: 1.0.0
          eventApiVersionIds:
          - eventApiVersionIds
          - eventApiVersionIds
          createdBy: "12345678"
          changedBy: "12345678"
          plans:
          - name: Gold
            solaceClassOfServicePolicy: ""
            id: "123456"
            type: plan
          - name: Gold
            solaceClassOfServicePolicy: ""
            id: "123456"
            type: plan
          solaceMessagingServices:
          - ""
          - ""
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        - summary: Summary string value of event API product version
          updatedTime: 2021-12-31T20:30:57.920Z
          eventApiProductRegistrations:
          - updatedTime: 2021-12-31T20:30:57.920Z
            eventApiProductVersionId: "12345678"
            type: eventApiProductRegistration
            applicationDomainId: "12345678"
            accessRequestId: "12345678"
            createdBy: "12345678"
            changedBy: "12345678"
            registrationId: "12345678"
            createdTime: 2021-12-31T20:30:57.920Z
            planId: "12345678"
            id: xyz23mwec2g
            state: Pending Approval
            customAttributes:
              key: customAttributes
          - updatedTime: 2021-12-31T20:30:57.920Z
            eventApiProductVersionId: "12345678"
            type: eventApiProductRegistration
            applicationDomainId: "12345678"
            accessRequestId: "12345678"
            createdBy: "12345678"
            changedBy: "12345678"
            registrationId: "12345678"
            createdTime: 2021-12-31T20:30:57.920Z
            planId: "12345678"
            id: xyz23mwec2g
            state: Pending Approval
            customAttributes:
              key: customAttributes
          displayName: Display name for the event API product version
          stateId: "1"
          approvalType: automatic
          description: Event API product created by Solace PubSub+ Cloud documentation
          filters:
          - eventVersionId: "123456"
            topicFilters:
            - updatedTime: 2021-12-31T20:30:57.920Z
              filterValue: " Tes?, TEST*FILTER, SAmPle"
              eventVersionIds:
              - eventVersionIds
              - eventVersionIds
              createdBy: "12345678"
              changedBy: "12345678"
              name: name
              createdTime: 2021-12-31T20:30:57.920Z
              type: topicFilter
            - updatedTime: 2021-12-31T20:30:57.920Z
              filterValue: " Tes?, TEST*FILTER, SAmPle"
              eventVersionIds:
              - eventVersionIds
              - eventVersionIds
              createdBy: "12345678"
              changedBy: "12345678"
              name: name
              createdTime: 2021-12-31T20:30:57.920Z
              type: topicFilter
            id: id
            type: filter
          - eventVersionId: "123456"
            topicFilters:
            - updatedTime: 2021-12-31T20:30:57.920Z
              filterValue: " Tes?, TEST*FILTER, SAmPle"
              eventVersionIds:
              - eventVersionIds
              - eventVersionIds
              createdBy: "12345678"
              changedBy: "12345678"
              name: name
              createdTime: 2021-12-31T20:30:57.920Z
              type: topicFilter
            - updatedTime: 2021-12-31T20:30:57.920Z
              filterValue: " Tes?, TEST*FILTER, SAmPle"
              eventVersionIds:
              - eventVersionIds
              - eventVersionIds
              createdBy: "12345678"
              changedBy: "12345678"
              name: name
              createdTime: 2021-12-31T20:30:57.920Z
              type: topicFilter
            id: id
            type: filter
          eventApiProductId: acb2j5k3mly
          type: type
          version: 1.0.0
          eventApiVersionIds:
          - eventApiVersionIds
          - eventApiVersionIds
          createdBy: "12345678"
          changedBy: "12345678"
          plans:
          - name: Gold
            solaceClassOfServicePolicy: ""
            id: "123456"
            type: plan
          - name: Gold
            solaceClassOfServicePolicy: ""
            id: "123456"
            type: plan
          solaceMessagingServices:
          - ""
          - ""
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    EventApiProductsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventApiProduct'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          shared: true
          applicationDomainId: abcappdomainid
          createdBy: "12345678"
          changedBy: "12345678"
          name: EventApiProductTest
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          numberOfVersions: 3
          id: "12345"
          type: type
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        - updatedTime: 2021-12-31T20:30:57.920Z
          shared: true
          applicationDomainId: abcappdomainid
          createdBy: "12345678"
          changedBy: "12345678"
          name: EventApiProductTest
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          numberOfVersions: 3
          id: "12345"
          type: type
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    EventApiResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/EventApi'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          shared: true
          applicationDomainId: acb2j5k3mly
          createdBy: "12345678"
          changedBy: "12345678"
          name: Apitest
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          numberOfVersions: 3
          id: "12345"
          type: type
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          key: {}
    EventApiVersion:
      required:
      - eventApiId
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          readOnly: true
          example: xyz23mwec2g
        eventApiId:
          type: string
          example: acb2j5k3mly
        description:
          maxLength: 10000
          type: string
          example: Event Api created by Solace PubSub+ Cloud documentation
        version:
          type: string
          example: 1.0.0
        displayName:
          maxLength: 40
          type: string
          example: Display name for the eventApi version
        producedEventVersionIds:
          type: array
          items:
            type: string
            example: "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        consumedEventVersionIds:
          type: array
          items:
            type: string
            example: "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        declaredEventApiProductVersionIds:
          type: array
          items:
            type: string
            example: "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        customAttributes:
          type: array
          items:
            $ref: '#/components/schemas/CustomAttribute'
        stateId:
          type: string
          example: "1"
        type:
          type: string
      example:
        consumedEventVersionIds:
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        updatedTime: 2021-12-31T20:30:57.920Z
        producedEventVersionIds:
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        displayName: Display name for the eventApi version
        declaredEventApiProductVersionIds:
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        stateId: "1"
        description: Event Api created by Solace PubSub+ Cloud documentation
        type: type
        version: 1.0.0
        createdBy: "12345678"
        changedBy: "12345678"
        eventApiId: acb2j5k3mly
        createdTime: 2021-12-31T20:30:57.920Z
        id: xyz23mwec2g
        customAttributes:
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
    EventApiVersionResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/EventApiVersion'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          consumedEventVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          updatedTime: 2021-12-31T20:30:57.920Z
          producedEventVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          displayName: Display name for the eventApi version
          declaredEventApiProductVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          stateId: "1"
          description: Event Api created by Solace PubSub+ Cloud documentation
          type: type
          version: 1.0.0
          createdBy: "12345678"
          changedBy: "12345678"
          eventApiId: acb2j5k3mly
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          key: {}
    EventApiVersionsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventApiVersion'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - consumedEventVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          updatedTime: 2021-12-31T20:30:57.920Z
          producedEventVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          displayName: Display name for the eventApi version
          declaredEventApiProductVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          stateId: "1"
          description: Event Api created by Solace PubSub+ Cloud documentation
          type: type
          version: 1.0.0
          createdBy: "12345678"
          changedBy: "12345678"
          eventApiId: acb2j5k3mly
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        - consumedEventVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          updatedTime: 2021-12-31T20:30:57.920Z
          producedEventVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          displayName: Display name for the eventApi version
          declaredEventApiProductVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          stateId: "1"
          description: Event Api created by Solace PubSub+ Cloud documentation
          type: type
          version: 1.0.0
          createdBy: "12345678"
          changedBy: "12345678"
          eventApiId: acb2j5k3mly
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    EventApisResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventApi'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          shared: true
          applicationDomainId: acb2j5k3mly
          createdBy: "12345678"
          changedBy: "12345678"
          name: Apitest
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          numberOfVersions: 3
          id: "12345"
          type: type
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        - updatedTime: 2021-12-31T20:30:57.920Z
          shared: true
          applicationDomainId: acb2j5k3mly
          createdBy: "12345678"
          changedBy: "12345678"
          name: Apitest
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          numberOfVersions: 3
          id: "12345"
          type: type
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    EventManagementAgent:
      required:
      - eventManagementAgentRegionId
      - name
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          description: Primary key set by the server.
          readOnly: true
          example: sdagkjlh32x
        name:
          type: string
          description: The name of the EMA.
          example: primary event management agent
        region:
          type: string
          description: "The region in which the EMA belongs to, extracted from the\
            \ EventManagementAgentRegion."
          readOnly: true
          example: North America
        clientUsername:
          type: string
          description: The SMF username for a customer's EMA to use to communicate
            to event-portal.
          readOnly: true
          example: sadhkjl2325sak
        clientPassword:
          type: string
          description: The SMF password for a customer's EMA to use to communicate
            to event-portal.
          readOnly: true
          example: SomePassword
        referencedByMessagingServiceIds:
          type: array
          readOnly: true
          items:
            type: string
            description: The list of messagingServiceIds user provides in GET APIs
              to filter the results.
            readOnly: true
            example: "[\"1kjdsf32\",\"9875ksdf\"]"
        orgId:
          type: string
          description: Used by admin APIs to get a list of EMAs against the given
            orgId
          readOnly: true
          example: 897xd32
        status:
          type: string
          description: The connection status of EP to the actual EMA which this object
            represents.
          readOnly: true
          example: Connected
        eventManagementAgentRegionId:
          type: string
          description: The ID of the associated EventManagementAgentRegion.
          example: sdfkjh3242ds
        type:
          type: string
          readOnly: true
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        type: type
        orgId: 897xd32
        createdBy: "12345678"
        changedBy: "12345678"
        clientUsername: sadhkjl2325sak
        referencedByMessagingServiceIds:
        - "[\"1kjdsf32\",\"9875ksdf\"]"
        - "[\"1kjdsf32\",\"9875ksdf\"]"
        name: primary event management agent
        createdTime: 2021-12-31T20:30:57.920Z
        id: sdagkjlh32x
        eventManagementAgentRegionId: sdfkjh3242ds
        region: North America
        clientPassword: SomePassword
        status: Connected
    EventManagementAgentRegion:
      required:
      - cloudProvider
      - host
      - msgVpn
      - name
      - region
      - serviceId
      type: object
      properties:
        id:
          type: string
          description: Primary key set by the server.
          readOnly: true
          example: "12345"
        serviceId:
          type: string
          description: The id of the service from maas-core.
          example: 67890x23vh
        name:
          type: string
          description: The name of the EventManagementAgentRegion.
          example: primary region
        cloudProvider:
          type: string
          description: The name of the cloud provider.
          example: AWS
        region:
          type: string
          description: The name of the region.
          example: us-east
        host:
          type: string
          description: The host name of the region.
          example: mr-connection-sdtwexd.messaging.solace.cloud
        msgVpn:
          type: string
          description: The name of the region's msgVpn.
          example: fooivmr1
        port:
          type: integer
          description: The SMF port number.
          format: int32
          example: 55443
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        updatedBy:
          type: string
          readOnly: true
          example: "12345678"
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        updatedBy: "12345678"
        port: 55443
        createdBy: "12345678"
        cloudProvider: AWS
        msgVpn: fooivmr1
        name: primary region
        host: mr-connection-sdtwexd.messaging.solace.cloud
        createdTime: 2021-12-31T20:30:57.920Z
        id: "12345"
        serviceId: 67890x23vh
        region: us-east
    EventManagementAgentRegionsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventManagementAgentRegion'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          updatedBy: "12345678"
          port: 55443
          createdBy: "12345678"
          cloudProvider: AWS
          msgVpn: fooivmr1
          name: primary region
          host: mr-connection-sdtwexd.messaging.solace.cloud
          createdTime: 2021-12-31T20:30:57.920Z
          id: "12345"
          serviceId: 67890x23vh
          region: us-east
        - updatedTime: 2021-12-31T20:30:57.920Z
          updatedBy: "12345678"
          port: 55443
          createdBy: "12345678"
          cloudProvider: AWS
          msgVpn: fooivmr1
          name: primary region
          host: mr-connection-sdtwexd.messaging.solace.cloud
          createdTime: 2021-12-31T20:30:57.920Z
          id: "12345"
          serviceId: 67890x23vh
          region: us-east
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    EventManagementAgentResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/EventManagementAgent'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          type: type
          orgId: 897xd32
          createdBy: "12345678"
          changedBy: "12345678"
          clientUsername: sadhkjl2325sak
          referencedByMessagingServiceIds:
          - "[\"1kjdsf32\",\"9875ksdf\"]"
          - "[\"1kjdsf32\",\"9875ksdf\"]"
          name: primary event management agent
          createdTime: 2021-12-31T20:30:57.920Z
          id: sdagkjlh32x
          eventManagementAgentRegionId: sdfkjh3242ds
          region: North America
          clientPassword: SomePassword
          status: Connected
        meta:
          key: {}
    EventManagementAgentsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventManagementAgent'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          type: type
          orgId: 897xd32
          createdBy: "12345678"
          changedBy: "12345678"
          clientUsername: sadhkjl2325sak
          referencedByMessagingServiceIds:
          - "[\"1kjdsf32\",\"9875ksdf\"]"
          - "[\"1kjdsf32\",\"9875ksdf\"]"
          name: primary event management agent
          createdTime: 2021-12-31T20:30:57.920Z
          id: sdagkjlh32x
          eventManagementAgentRegionId: sdfkjh3242ds
          region: North America
          clientPassword: SomePassword
          status: Connected
        - updatedTime: 2021-12-31T20:30:57.920Z
          type: type
          orgId: 897xd32
          createdBy: "12345678"
          changedBy: "12345678"
          clientUsername: sadhkjl2325sak
          referencedByMessagingServiceIds:
          - "[\"1kjdsf32\",\"9875ksdf\"]"
          - "[\"1kjdsf32\",\"9875ksdf\"]"
          name: primary event management agent
          createdTime: 2021-12-31T20:30:57.920Z
          id: sdagkjlh32x
          eventManagementAgentRegionId: sdfkjh3242ds
          region: North America
          clientPassword: SomePassword
          status: Connected
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    EventMesh:
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          description: Primary key set by the server.
          readOnly: true
          example: "12345"
        name:
          maxLength: 40
          minLength: 1
          type: string
          description: The name of the event mesh.
          example: Inventory
        environmentId:
          maxLength: 255
          minLength: 1
          type: string
          description: The environmentId of the Event Mesh
          example: "67890"
        description:
          maxLength: 10000
          minLength: 1
          type: string
          description: The description of the event mesh.
          example: The Inventory Event Meshapplications.
        brokerType:
          type: string
          description: The type of the broker used in the event mesh.
          enum:
          - kafka
          - solace
        applicationVersionIds:
          type: array
          description: "*deprecationDate: 2022-12-01T00:00:00.000Z<br>removalDate:\
            \ 2023-12-01T00:00:00.000Z<br>reason: Application versions must now be\
            \ <a href=#/Applications/updateMessagingServiceAssociationForApplicationVersions>associated\
            \ to messaging services</a> instead of modeled event meshes.*<br>"
          deprecated: true
          items:
            type: string
        type:
          type: string
          description: "The type of this payload, eventMesh."
          readOnly: true
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        environmentId: "67890"
        applicationVersionIds:
        - applicationVersionIds
        - applicationVersionIds
        createdBy: "12345678"
        changedBy: "12345678"
        name: Inventory
        brokerType: kafka
        createdTime: 2021-12-31T20:30:57.920Z
        description: The Inventory Event Meshapplications.
        id: "12345"
        type: type
    EventMeshResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/EventMesh'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          environmentId: "67890"
          applicationVersionIds:
          - applicationVersionIds
          - applicationVersionIds
          createdBy: "12345678"
          changedBy: "12345678"
          name: Inventory
          brokerType: kafka
          createdTime: 2021-12-31T20:30:57.920Z
          description: The Inventory Event Meshapplications.
          id: "12345"
          type: type
        meta:
          key: {}
    EventMeshesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventMesh'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          environmentId: "67890"
          applicationVersionIds:
          - applicationVersionIds
          - applicationVersionIds
          createdBy: "12345678"
          changedBy: "12345678"
          name: Inventory
          brokerType: kafka
          createdTime: 2021-12-31T20:30:57.920Z
          description: The Inventory Event Meshapplications.
          id: "12345"
          type: type
        - updatedTime: 2021-12-31T20:30:57.920Z
          environmentId: "67890"
          applicationVersionIds:
          - applicationVersionIds
          - applicationVersionIds
          createdBy: "12345678"
          changedBy: "12345678"
          name: Inventory
          brokerType: kafka
          createdTime: 2021-12-31T20:30:57.920Z
          description: The Inventory Event Meshapplications.
          id: "12345"
          type: type
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    EventResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Event'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          shared: false
          applicationDomainId: acb2j5k3mly
          createdBy: "12345678"
          changedBy: "12345678"
          name: My First Event
          createdTime: 2021-12-31T20:30:57.920Z
          numberOfVersions: 0
          id: xyz23mwec2g
          type: type
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          key: {}
    EventVersion:
      required:
      - eventId
      - version
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          readOnly: true
          example: xyz23mwec2g
        eventId:
          type: string
          example: acb2j5k3mly
        description:
          maxLength: 10000
          type: string
          example: Event version created by Solace PubSub+ Cloud documentation
        version:
          type: string
          example: 1.0.0
        displayName:
          maxLength: 40
          type: string
          example: Display name for the version
        declaredProducingApplicationVersionIds:
          type: array
          readOnly: true
          items:
            type: string
            readOnly: true
            example: "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        declaredConsumingApplicationVersionIds:
          type: array
          readOnly: true
          items:
            type: string
            readOnly: true
            example: "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        producingEventApiVersionIds:
          type: array
          readOnly: true
          items:
            type: string
            readOnly: true
            example: "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        consumingEventApiVersionIds:
          type: array
          readOnly: true
          items:
            type: string
            readOnly: true
            example: "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        attractingApplicationVersionIds:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/AttractingApplicationVersionTuple'
        schemaVersionId:
          type: string
          example: shb3mlyec2g
        schemaPrimitiveType:
          type: string
          example: BYTES
          enum:
          - BOOLEAN
          - BYTES
          - DOUBLE
          - FLOAT
          - INT
          - LONG
          - "NULL"
          - NUMBER
          - STRING
        deliveryDescriptor:
          $ref: '#/components/schemas/DeliveryDescriptor'
        stateId:
          type: string
          readOnly: true
          example: "1"
        customAttributes:
          type: array
          items:
            $ref: '#/components/schemas/CustomAttribute'
        messagingServiceIds:
          type: array
          readOnly: true
          items:
            type: string
            readOnly: true
            example: "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        type:
          type: string
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        eventId: acb2j5k3mly
        deliveryDescriptor:
          updatedTime: 2021-12-31T20:30:57.920Z
          address:
            updatedTime: 2021-12-31T20:30:57.920Z
            createdBy: "12345678"
            changedBy: "12345678"
            addressType: topic
            createdTime: 2021-12-31T20:30:57.920Z
            id: id
            type: type
            addressLevels:
            - enumVersionId: enumVersionId
              name: root
              addressLevelType: literal
            - enumVersionId: enumVersionId
              name: root
              addressLevelType: literal
          keySchemaVersionId: shb3mlyec2g
          createdBy: "12345678"
          keySchemaPrimitiveType: BYTES
          changedBy: "12345678"
          brokerType: brokerType
          createdTime: 2021-12-31T20:30:57.920Z
          id: id
          type: type
        producingEventApiVersionIds:
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        displayName: Display name for the version
        stateId: "1"
        description: Event version created by Solace PubSub+ Cloud documentation
        declaredConsumingApplicationVersionIds:
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        type: type
        version: 1.0.0
        messagingServiceIds:
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        declaredProducingApplicationVersionIds:
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        schemaPrimitiveType: BYTES
        createdBy: "12345678"
        changedBy: "12345678"
        consumingEventApiVersionIds:
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        createdTime: 2021-12-31T20:30:57.920Z
        attractingApplicationVersionIds:
        - eventMeshIds:
          - eventMeshIds
          - eventMeshIds
          applicationVersionId: applicationVersionId
        - eventMeshIds:
          - eventMeshIds
          - eventMeshIds
          applicationVersionId: applicationVersionId
        id: xyz23mwec2g
        schemaVersionId: shb3mlyec2g
        customAttributes:
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
    EventVersionResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/EventVersion'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          eventId: acb2j5k3mly
          deliveryDescriptor:
            updatedTime: 2021-12-31T20:30:57.920Z
            address:
              updatedTime: 2021-12-31T20:30:57.920Z
              createdBy: "12345678"
              changedBy: "12345678"
              addressType: topic
              createdTime: 2021-12-31T20:30:57.920Z
              id: id
              type: type
              addressLevels:
              - enumVersionId: enumVersionId
                name: root
                addressLevelType: literal
              - enumVersionId: enumVersionId
                name: root
                addressLevelType: literal
            keySchemaVersionId: shb3mlyec2g
            createdBy: "12345678"
            keySchemaPrimitiveType: BYTES
            changedBy: "12345678"
            brokerType: brokerType
            createdTime: 2021-12-31T20:30:57.920Z
            id: id
            type: type
          producingEventApiVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          displayName: Display name for the version
          stateId: "1"
          description: Event version created by Solace PubSub+ Cloud documentation
          declaredConsumingApplicationVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          type: type
          version: 1.0.0
          messagingServiceIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          declaredProducingApplicationVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          schemaPrimitiveType: BYTES
          createdBy: "12345678"
          changedBy: "12345678"
          consumingEventApiVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          createdTime: 2021-12-31T20:30:57.920Z
          attractingApplicationVersionIds:
          - eventMeshIds:
            - eventMeshIds
            - eventMeshIds
            applicationVersionId: applicationVersionId
          - eventMeshIds:
            - eventMeshIds
            - eventMeshIds
            applicationVersionId: applicationVersionId
          id: xyz23mwec2g
          schemaVersionId: shb3mlyec2g
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          key: {}
    EventVersionsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventVersion'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          eventId: acb2j5k3mly
          deliveryDescriptor:
            updatedTime: 2021-12-31T20:30:57.920Z
            address:
              updatedTime: 2021-12-31T20:30:57.920Z
              createdBy: "12345678"
              changedBy: "12345678"
              addressType: topic
              createdTime: 2021-12-31T20:30:57.920Z
              id: id
              type: type
              addressLevels:
              - enumVersionId: enumVersionId
                name: root
                addressLevelType: literal
              - enumVersionId: enumVersionId
                name: root
                addressLevelType: literal
            keySchemaVersionId: shb3mlyec2g
            createdBy: "12345678"
            keySchemaPrimitiveType: BYTES
            changedBy: "12345678"
            brokerType: brokerType
            createdTime: 2021-12-31T20:30:57.920Z
            id: id
            type: type
          producingEventApiVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          displayName: Display name for the version
          stateId: "1"
          description: Event version created by Solace PubSub+ Cloud documentation
          declaredConsumingApplicationVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          type: type
          version: 1.0.0
          messagingServiceIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          declaredProducingApplicationVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          schemaPrimitiveType: BYTES
          createdBy: "12345678"
          changedBy: "12345678"
          consumingEventApiVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          createdTime: 2021-12-31T20:30:57.920Z
          attractingApplicationVersionIds:
          - eventMeshIds:
            - eventMeshIds
            - eventMeshIds
            applicationVersionId: applicationVersionId
          - eventMeshIds:
            - eventMeshIds
            - eventMeshIds
            applicationVersionId: applicationVersionId
          id: xyz23mwec2g
          schemaVersionId: shb3mlyec2g
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        - updatedTime: 2021-12-31T20:30:57.920Z
          eventId: acb2j5k3mly
          deliveryDescriptor:
            updatedTime: 2021-12-31T20:30:57.920Z
            address:
              updatedTime: 2021-12-31T20:30:57.920Z
              createdBy: "12345678"
              changedBy: "12345678"
              addressType: topic
              createdTime: 2021-12-31T20:30:57.920Z
              id: id
              type: type
              addressLevels:
              - enumVersionId: enumVersionId
                name: root
                addressLevelType: literal
              - enumVersionId: enumVersionId
                name: root
                addressLevelType: literal
            keySchemaVersionId: shb3mlyec2g
            createdBy: "12345678"
            keySchemaPrimitiveType: BYTES
            changedBy: "12345678"
            brokerType: brokerType
            createdTime: 2021-12-31T20:30:57.920Z
            id: id
            type: type
          producingEventApiVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          displayName: Display name for the version
          stateId: "1"
          description: Event version created by Solace PubSub+ Cloud documentation
          declaredConsumingApplicationVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          type: type
          version: 1.0.0
          messagingServiceIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          declaredProducingApplicationVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          schemaPrimitiveType: BYTES
          createdBy: "12345678"
          changedBy: "12345678"
          consumingEventApiVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          createdTime: 2021-12-31T20:30:57.920Z
          attractingApplicationVersionIds:
          - eventMeshIds:
            - eventMeshIds
            - eventMeshIds
            applicationVersionId: applicationVersionId
          - eventMeshIds:
            - eventMeshIds
            - eventMeshIds
            applicationVersionId: applicationVersionId
          id: xyz23mwec2g
          schemaVersionId: shb3mlyec2g
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    EventsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          shared: false
          applicationDomainId: acb2j5k3mly
          createdBy: "12345678"
          changedBy: "12345678"
          name: My First Event
          createdTime: 2021-12-31T20:30:57.920Z
          numberOfVersions: 0
          id: xyz23mwec2g
          type: type
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        - updatedTime: 2021-12-31T20:30:57.920Z
          shared: false
          applicationDomainId: acb2j5k3mly
          createdBy: "12345678"
          changedBy: "12345678"
          name: My First Event
          createdTime: 2021-12-31T20:30:57.920Z
          numberOfVersions: 0
          id: xyz23mwec2g
          type: type
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    Filter:
      type: object
      properties:
        eventVersionId:
          type: string
          example: "123456"
        topicFilters:
          type: array
          description: List of variable that contains address node name and filters
          items:
            $ref: '#/components/schemas/TopicFilter'
        id:
          type: string
        type:
          type: string
          description: The type of payload
          readOnly: true
          default: filter
      description: List of filters that contains eventVersionId name and variables
      example:
        eventVersionId: "123456"
        topicFilters:
        - updatedTime: 2021-12-31T20:30:57.920Z
          filterValue: " Tes?, TEST*FILTER, SAmPle"
          eventVersionIds:
          - eventVersionIds
          - eventVersionIds
          createdBy: "12345678"
          changedBy: "12345678"
          name: name
          createdTime: 2021-12-31T20:30:57.920Z
          type: topicFilter
        - updatedTime: 2021-12-31T20:30:57.920Z
          filterValue: " Tes?, TEST*FILTER, SAmPle"
          eventVersionIds:
          - eventVersionIds
          - eventVersionIds
          createdBy: "12345678"
          changedBy: "12345678"
          name: name
          createdTime: 2021-12-31T20:30:57.920Z
          type: topicFilter
        id: id
        type: filter
    GatewayMessagingService:
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
        messagingServiceId:
          type: string
        eventApiProductVersionId:
          type: string
        supportedProtocols:
          type: array
          items:
            type: string
            enum:
            - smfc
            - smf
            - smfs
            - amqp
            - amqps
            - mqtt
            - mqtts
            - mqttws
            - mqttwss
            - SECUREMQTT
            - SECUREMQTTWS
            - rest
            - rests
        type:
          type: string
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        createdBy: "12345678"
        changedBy: "12345678"
        createdTime: 2021-12-31T20:30:57.920Z
        eventApiProductVersionId: eventApiProductVersionId
        id: id
        messagingServiceId: messagingServiceId
        type: type
        supportedProtocols:
        - smfc
        - smfc
    GatewayMessagingServiceResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/GatewayMessagingService'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          createdBy: "12345678"
          changedBy: "12345678"
          createdTime: 2021-12-31T20:30:57.920Z
          eventApiProductVersionId: eventApiProductVersionId
          id: id
          messagingServiceId: messagingServiceId
          type: type
          supportedProtocols:
          - smfc
          - smfc
        meta:
          key: {}
    InvalidNonStateReference:
      type: object
      properties:
        entityId:
          type: string
        entityType:
          type: string
    InvalidStateReference:
      type: object
      allOf:
      - $ref: '#/components/schemas/ErrorResponse'
      - type: object
        properties:
          targetStateId:
            type: string
          inboundInvalidNonStateReferences:
            type: array
            items:
              $ref: '#/components/schemas/InvalidNonStateReference'
          inboundInvalidStateReferences:
            type: array
            items:
              $ref: '#/components/schemas/InvalidStateReference'
          outboundInvalidStateReferences:
            type: array
            items:
              $ref: '#/components/schemas/InvalidStateReference'
          errorType:
            type: string
    MessagingService:
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          description: Primary key set by the server.
          readOnly: true
          example: asdkl234x
        eventMeshId:
          type: string
          description: The eventMeshId associated to the messaging service.
          example: 67890x23vh
        runtimeAgentId:
          type: string
          description: The runtimeAgentId associated to the messaging service.
          example: vh1234y14
        solaceCloudMessagingServiceId:
          type: string
          description: The solaceCloudMessagingServiceId associated to the messaging
            service.
          example: abcd1234x
        messagingServiceType:
          type: string
          description: The type of the messaging service.
          example: solace
        name:
          type: string
          description: The name of the messaging service.
          example: first messagingService
        messagingServiceConnections:
          type: array
          items:
            $ref: '#/components/schemas/MessagingServiceConnection'
        eventManagementAgentId:
          type: string
        type:
          type: string
          readOnly: true
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        messagingServiceConnections:
        - updatedTime: 2021-12-31T20:30:57.920Z
          bindings:
            msgVpn: myVPN
          messagingServiceId: sdkjhg21948
          type: type
          messagingServiceAuthentications:
          - updatedTime: 2021-12-31T20:30:57.920Z
            messagingServiceConnectionId: sdafgj23
            messagingServiceCredentials:
            - updatedTime: 2021-12-31T20:30:57.920Z
              createdBy: "12345678"
              credentials:
                username: User1
                password: secretPass
              changedBy: "12345678"
              name: basic auth credentials
              createdTime: 2021-12-31T20:30:57.920Z
              id: lkjdsfgew2
              type: type
              messagingServiceAuthenticationId: sdafgj23
            - updatedTime: 2021-12-31T20:30:57.920Z
              createdBy: "12345678"
              credentials:
                username: User1
                password: secretPass
              changedBy: "12345678"
              name: basic auth credentials
              createdTime: 2021-12-31T20:30:57.920Z
              id: lkjdsfgew2
              type: type
              messagingServiceAuthenticationId: sdafgj23
            createdBy: "12345678"
            changedBy: "12345678"
            name: https auth details
            createdTime: 2021-12-31T20:30:57.920Z
            id: kjsfg32ds
            authenticationType: basicAuthentication
            type: type
            authenticationDetails:
              broker owner: Solace PE team
          - updatedTime: 2021-12-31T20:30:57.920Z
            messagingServiceConnectionId: sdafgj23
            messagingServiceCredentials:
            - updatedTime: 2021-12-31T20:30:57.920Z
              createdBy: "12345678"
              credentials:
                username: User1
                password: secretPass
              changedBy: "12345678"
              name: basic auth credentials
              createdTime: 2021-12-31T20:30:57.920Z
              id: lkjdsfgew2
              type: type
              messagingServiceAuthenticationId: sdafgj23
            - updatedTime: 2021-12-31T20:30:57.920Z
              createdBy: "12345678"
              credentials:
                username: User1
                password: secretPass
              changedBy: "12345678"
              name: basic auth credentials
              createdTime: 2021-12-31T20:30:57.920Z
              id: lkjdsfgew2
              type: type
              messagingServiceAuthenticationId: sdafgj23
            createdBy: "12345678"
            changedBy: "12345678"
            name: https auth details
            createdTime: 2021-12-31T20:30:57.920Z
            id: kjsfg32ds
            authenticationType: basicAuthentication
            type: type
            authenticationDetails:
              broker owner: Solace PE team
          url: https://abcd.messaging.solace.cloud:943
          protocol: https
          createdBy: "12345678"
          changedBy: "12345678"
          name: my https connection
          createdTime: 2021-12-31T20:30:57.920Z
          protocolVersion: "2.0"
          id: 5432dfg3
        - updatedTime: 2021-12-31T20:30:57.920Z
          bindings:
            msgVpn: myVPN
          messagingServiceId: sdkjhg21948
          type: type
          messagingServiceAuthentications:
          - updatedTime: 2021-12-31T20:30:57.920Z
            messagingServiceConnectionId: sdafgj23
            messagingServiceCredentials:
            - updatedTime: 2021-12-31T20:30:57.920Z
              createdBy: "12345678"
              credentials:
                username: User1
                password: secretPass
              changedBy: "12345678"
              name: basic auth credentials
              createdTime: 2021-12-31T20:30:57.920Z
              id: lkjdsfgew2
              type: type
              messagingServiceAuthenticationId: sdafgj23
            - updatedTime: 2021-12-31T20:30:57.920Z
              createdBy: "12345678"
              credentials:
                username: User1
                password: secretPass
              changedBy: "12345678"
              name: basic auth credentials
              createdTime: 2021-12-31T20:30:57.920Z
              id: lkjdsfgew2
              type: type
              messagingServiceAuthenticationId: sdafgj23
            createdBy: "12345678"
            changedBy: "12345678"
            name: https auth details
            createdTime: 2021-12-31T20:30:57.920Z
            id: kjsfg32ds
            authenticationType: basicAuthentication
            type: type
            authenticationDetails:
              broker owner: Solace PE team
          - updatedTime: 2021-12-31T20:30:57.920Z
            messagingServiceConnectionId: sdafgj23
            messagingServiceCredentials:
            - updatedTime: 2021-12-31T20:30:57.920Z
              createdBy: "12345678"
              credentials:
                username: User1
                password: secretPass
              changedBy: "12345678"
              name: basic auth credentials
              createdTime: 2021-12-31T20:30:57.920Z
              id: lkjdsfgew2
              type: type
              messagingServiceAuthenticationId: sdafgj23
            - updatedTime: 2021-12-31T20:30:57.920Z
              createdBy: "12345678"
              credentials:
                username: User1
                password: secretPass
              changedBy: "12345678"
              name: basic auth credentials
              createdTime: 2021-12-31T20:30:57.920Z
              id: lkjdsfgew2
              type: type
              messagingServiceAuthenticationId: sdafgj23
            createdBy: "12345678"
            changedBy: "12345678"
            name: https auth details
            createdTime: 2021-12-31T20:30:57.920Z
            id: kjsfg32ds
            authenticationType: basicAuthentication
            type: type
            authenticationDetails:
              broker owner: Solace PE team
          url: https://abcd.messaging.solace.cloud:943
          protocol: https
          createdBy: "12345678"
          changedBy: "12345678"
          name: my https connection
          createdTime: 2021-12-31T20:30:57.920Z
          protocolVersion: "2.0"
          id: 5432dfg3
        solaceCloudMessagingServiceId: abcd1234x
        type: type
        eventManagementAgentId: eventManagementAgentId
        eventMeshId: 67890x23vh
        createdBy: "12345678"
        changedBy: "12345678"
        messagingServiceType: solace
        runtimeAgentId: vh1234y14
        name: first messagingService
        createdTime: 2021-12-31T20:30:57.920Z
        id: asdkl234x
    MessagingServiceAssociationDTO:
      type: object
      properties:
        messagingServiceIds:
          type: array
          items:
            type: string
            example: "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
      example:
        messagingServiceIds:
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
    MessagingServiceAssociationResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/MessagingServiceAssociationDTO'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          messagingServiceIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        meta:
          key: {}
    MessagingServiceAuthentication:
      required:
      - authenticationType
      - name
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          description: Primary key set by the server.
          readOnly: true
          example: kjsfg32ds
        messagingServiceConnectionId:
          type: string
          description: The ID of the connection object associated to the authentication
            object.
          readOnly: true
          example: sdafgj23
        name:
          type: string
          description: The name of the authentication object.
          example: https auth details
        authenticationType:
          type: string
          description: The type of the authentication object.
          example: basicAuthentication
        authenticationDetails:
          type: object
          additionalProperties:
            type: object
            description: A JSON map containing a map of extra details for the authentication.
            example:
              broker owner: Solace PE team
          description: A JSON map containing a map of extra details for the authentication.
          example:
            broker owner: Solace PE team
        messagingServiceCredentials:
          type: array
          items:
            $ref: '#/components/schemas/MessagingServiceCredentials'
        type:
          type: string
          readOnly: true
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        messagingServiceConnectionId: sdafgj23
        messagingServiceCredentials:
        - updatedTime: 2021-12-31T20:30:57.920Z
          createdBy: "12345678"
          credentials:
            username: User1
            password: secretPass
          changedBy: "12345678"
          name: basic auth credentials
          createdTime: 2021-12-31T20:30:57.920Z
          id: lkjdsfgew2
          type: type
          messagingServiceAuthenticationId: sdafgj23
        - updatedTime: 2021-12-31T20:30:57.920Z
          createdBy: "12345678"
          credentials:
            username: User1
            password: secretPass
          changedBy: "12345678"
          name: basic auth credentials
          createdTime: 2021-12-31T20:30:57.920Z
          id: lkjdsfgew2
          type: type
          messagingServiceAuthenticationId: sdafgj23
        createdBy: "12345678"
        changedBy: "12345678"
        name: https auth details
        createdTime: 2021-12-31T20:30:57.920Z
        id: kjsfg32ds
        authenticationType: basicAuthentication
        type: type
        authenticationDetails:
          broker owner: Solace PE team
    MessagingServiceConnection:
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          description: Primary key set by the server.
          readOnly: true
          example: 5432dfg3
        messagingServiceId:
          type: string
          description: The messagingServiceId associated to the connection object.
          readOnly: true
          example: sdkjhg21948
        name:
          type: string
          description: The name of the connection object.
          example: my https connection
        url:
          type: string
          description: The url of the connection object.
          example: https://abcd.messaging.solace.cloud:943
        protocol:
          type: string
          description: The protocol of the connection object.
          example: https
        protocolVersion:
          type: string
          description: The protocolVersion of the connection object.
          example: "2.0"
        bindings:
          type: object
          additionalProperties:
            type: object
            description: 'A JSON map containing a map of connection-specific values. '
            example:
              msgVpn: myVPN
          description: 'A JSON map containing a map of connection-specific values. '
          example:
            msgVpn: myVPN
        messagingServiceAuthentications:
          type: array
          items:
            $ref: '#/components/schemas/MessagingServiceAuthentication'
        type:
          type: string
          readOnly: true
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        bindings:
          msgVpn: myVPN
        messagingServiceId: sdkjhg21948
        type: type
        messagingServiceAuthentications:
        - updatedTime: 2021-12-31T20:30:57.920Z
          messagingServiceConnectionId: sdafgj23
          messagingServiceCredentials:
          - updatedTime: 2021-12-31T20:30:57.920Z
            createdBy: "12345678"
            credentials:
              username: User1
              password: secretPass
            changedBy: "12345678"
            name: basic auth credentials
            createdTime: 2021-12-31T20:30:57.920Z
            id: lkjdsfgew2
            type: type
            messagingServiceAuthenticationId: sdafgj23
          - updatedTime: 2021-12-31T20:30:57.920Z
            createdBy: "12345678"
            credentials:
              username: User1
              password: secretPass
            changedBy: "12345678"
            name: basic auth credentials
            createdTime: 2021-12-31T20:30:57.920Z
            id: lkjdsfgew2
            type: type
            messagingServiceAuthenticationId: sdafgj23
          createdBy: "12345678"
          changedBy: "12345678"
          name: https auth details
          createdTime: 2021-12-31T20:30:57.920Z
          id: kjsfg32ds
          authenticationType: basicAuthentication
          type: type
          authenticationDetails:
            broker owner: Solace PE team
        - updatedTime: 2021-12-31T20:30:57.920Z
          messagingServiceConnectionId: sdafgj23
          messagingServiceCredentials:
          - updatedTime: 2021-12-31T20:30:57.920Z
            createdBy: "12345678"
            credentials:
              username: User1
              password: secretPass
            changedBy: "12345678"
            name: basic auth credentials
            createdTime: 2021-12-31T20:30:57.920Z
            id: lkjdsfgew2
            type: type
            messagingServiceAuthenticationId: sdafgj23
          - updatedTime: 2021-12-31T20:30:57.920Z
            createdBy: "12345678"
            credentials:
              username: User1
              password: secretPass
            changedBy: "12345678"
            name: basic auth credentials
            createdTime: 2021-12-31T20:30:57.920Z
            id: lkjdsfgew2
            type: type
            messagingServiceAuthenticationId: sdafgj23
          createdBy: "12345678"
          changedBy: "12345678"
          name: https auth details
          createdTime: 2021-12-31T20:30:57.920Z
          id: kjsfg32ds
          authenticationType: basicAuthentication
          type: type
          authenticationDetails:
            broker owner: Solace PE team
        url: https://abcd.messaging.solace.cloud:943
        protocol: https
        createdBy: "12345678"
        changedBy: "12345678"
        name: my https connection
        createdTime: 2021-12-31T20:30:57.920Z
        protocolVersion: "2.0"
        id: 5432dfg3
    MessagingServiceCredentials:
      required:
      - credentials
      - name
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          description: Primary key set by the server.
          readOnly: true
          example: lkjdsfgew2
        messagingServiceAuthenticationId:
          type: string
          description: The ID of the authentication object associated to the credentials
            object.
          readOnly: true
          example: sdafgj23
        name:
          type: string
          description: The name of the credentials object.
          example: basic auth credentials
        credentials:
          type: object
          additionalProperties:
            type: object
            description: A JSON map containing the credentials information.
            example:
              username: User1
              password: secretPass
          description: A JSON map containing the credentials information.
          example:
            username: User1
            password: secretPass
        type:
          type: string
          readOnly: true
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        createdBy: "12345678"
        credentials:
          username: User1
          password: secretPass
        changedBy: "12345678"
        name: basic auth credentials
        createdTime: 2021-12-31T20:30:57.920Z
        id: lkjdsfgew2
        type: type
        messagingServiceAuthenticationId: sdafgj23
    MessagingServiceOperation:
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          description: Primary key set by the server.
          readOnly: true
          example: kljhwe32
        messagingServiceId:
          type: string
          description: The ID of the messaging service.
          example: kjerv32ck
        scanTypes:
          type: array
          items:
            type: string
            description: The list of scanTypes to be scanned.
            example: "[\"KAFKA_BROKER_CONFIGURATION\",\"KAFKA_TOPIC_LISTING\"]"
            enum:
            - KAFKA_ALL
            - KAFKA_BROKER_CONFIGURATION
            - KAFKA_CLUSTER_CONFIGURATION
            - KAFKA_CONSUMER_GROUPS
            - KAFKA_CONSUMER_GROUPS_CONFIGURATION
            - KAFKA_FEATURES
            - KAFKA_PRODUCERS
            - KAFKA_TOPIC_CONFIGURATION
            - KAFKA_TOPIC_CONFIGURATION_FULL
            - KAFKA_TOPIC_LISTING
            - KAFKA_TOPIC_OVERRIDE_CONFIGURATION
            - SOLACE_ALL
            - SOLACE_QUEUE_CONFIG
            - SOLACE_QUEUE_LISTING
            - SOLACE_SUBSCRIPTION_CONFIG
        destinations:
          type: array
          items:
            type: string
            description: The list of destinations for EMA to send results to.
            example: "[\"EVENT_PORTAL\",\"FILE_WRITER\"]"
            enum:
            - EVENT_PORTAL
            - FILE_WRITER
        type:
          type: string
          readOnly: true
      example:
        scanTypes:
        - "[\"KAFKA_BROKER_CONFIGURATION\",\"KAFKA_TOPIC_LISTING\"]"
        - "[\"KAFKA_BROKER_CONFIGURATION\",\"KAFKA_TOPIC_LISTING\"]"
        updatedTime: 2021-12-31T20:30:57.920Z
        createdBy: "12345678"
        changedBy: "12345678"
        destinations:
        - "[\"EVENT_PORTAL\",\"FILE_WRITER\"]"
        - "[\"EVENT_PORTAL\",\"FILE_WRITER\"]"
        createdTime: 2021-12-31T20:30:57.920Z
        id: kljhwe32
        messagingServiceId: kjerv32ck
        type: type
    MessagingServiceOperationResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/MessagingServiceOperation'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          scanTypes:
          - "[\"KAFKA_BROKER_CONFIGURATION\",\"KAFKA_TOPIC_LISTING\"]"
          - "[\"KAFKA_BROKER_CONFIGURATION\",\"KAFKA_TOPIC_LISTING\"]"
          updatedTime: 2021-12-31T20:30:57.920Z
          createdBy: "12345678"
          changedBy: "12345678"
          destinations:
          - "[\"EVENT_PORTAL\",\"FILE_WRITER\"]"
          - "[\"EVENT_PORTAL\",\"FILE_WRITER\"]"
          createdTime: 2021-12-31T20:30:57.920Z
          id: kljhwe32
          messagingServiceId: kjerv32ck
          type: type
        meta:
          key: {}
    MessagingServiceRemoveAssociation:
      type: object
      properties:
        association:
          type: string
          description: The target association to be removed from the messaging service.
          example: EVENT_MANAGEMENT_AGENT
          enum:
          - RUNTIME_AGENT
          - EVENT_MESH
          - EVENT_MANAGEMENT_AGENT
    MessagingServiceResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/MessagingService'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          messagingServiceConnections:
          - updatedTime: 2021-12-31T20:30:57.920Z
            bindings:
              msgVpn: myVPN
            messagingServiceId: sdkjhg21948
            type: type
            messagingServiceAuthentications:
            - updatedTime: 2021-12-31T20:30:57.920Z
              messagingServiceConnectionId: sdafgj23
              messagingServiceCredentials:
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              createdBy: "12345678"
              changedBy: "12345678"
              name: https auth details
              createdTime: 2021-12-31T20:30:57.920Z
              id: kjsfg32ds
              authenticationType: basicAuthentication
              type: type
              authenticationDetails:
                broker owner: Solace PE team
            - updatedTime: 2021-12-31T20:30:57.920Z
              messagingServiceConnectionId: sdafgj23
              messagingServiceCredentials:
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              createdBy: "12345678"
              changedBy: "12345678"
              name: https auth details
              createdTime: 2021-12-31T20:30:57.920Z
              id: kjsfg32ds
              authenticationType: basicAuthentication
              type: type
              authenticationDetails:
                broker owner: Solace PE team
            url: https://abcd.messaging.solace.cloud:943
            protocol: https
            createdBy: "12345678"
            changedBy: "12345678"
            name: my https connection
            createdTime: 2021-12-31T20:30:57.920Z
            protocolVersion: "2.0"
            id: 5432dfg3
          - updatedTime: 2021-12-31T20:30:57.920Z
            bindings:
              msgVpn: myVPN
            messagingServiceId: sdkjhg21948
            type: type
            messagingServiceAuthentications:
            - updatedTime: 2021-12-31T20:30:57.920Z
              messagingServiceConnectionId: sdafgj23
              messagingServiceCredentials:
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              createdBy: "12345678"
              changedBy: "12345678"
              name: https auth details
              createdTime: 2021-12-31T20:30:57.920Z
              id: kjsfg32ds
              authenticationType: basicAuthentication
              type: type
              authenticationDetails:
                broker owner: Solace PE team
            - updatedTime: 2021-12-31T20:30:57.920Z
              messagingServiceConnectionId: sdafgj23
              messagingServiceCredentials:
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              createdBy: "12345678"
              changedBy: "12345678"
              name: https auth details
              createdTime: 2021-12-31T20:30:57.920Z
              id: kjsfg32ds
              authenticationType: basicAuthentication
              type: type
              authenticationDetails:
                broker owner: Solace PE team
            url: https://abcd.messaging.solace.cloud:943
            protocol: https
            createdBy: "12345678"
            changedBy: "12345678"
            name: my https connection
            createdTime: 2021-12-31T20:30:57.920Z
            protocolVersion: "2.0"
            id: 5432dfg3
          solaceCloudMessagingServiceId: abcd1234x
          type: type
          eventManagementAgentId: eventManagementAgentId
          eventMeshId: 67890x23vh
          createdBy: "12345678"
          changedBy: "12345678"
          messagingServiceType: solace
          runtimeAgentId: vh1234y14
          name: first messagingService
          createdTime: 2021-12-31T20:30:57.920Z
          id: asdkl234x
        meta:
          key: {}
    MessagingServiceScan:
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          description: Primary key set by the server.
          readOnly: true
          example: "12345"
        status:
          type: string
          description: The status of the messaging service scan.
          readOnly: true
          example: FAILED
        statusDescription:
          type: string
          description: The description of the messaging service scan status.
          readOnly: true
          example: Scan failed because some scanTypes failed to complete.
        messagingServiceId:
          type: string
          description: The messagingServiceId of the scan.
          readOnly: true
          example: 67890x23vh
        messagingServiceName:
          type: string
          description: The messagingServiceName of the scan.
          readOnly: true
          example: first solace messagingService
        scanTypes:
          type: string
          description: The scanTypes that were requested for the scan.
          readOnly: true
          example: KAFKA_ALL
        destinations:
          type: string
          description: The destinations which EMA will send the scan results.
          readOnly: true
          example: "EVENT_PORTAL,FILE_WRITER"
        type:
          type: string
          readOnly: true
      example:
        scanTypes: KAFKA_ALL
        updatedTime: 2021-12-31T20:30:57.920Z
        statusDescription: Scan failed because some scanTypes failed to complete.
        messagingServiceName: first solace messagingService
        createdBy: "12345678"
        changedBy: "12345678"
        destinations: "EVENT_PORTAL,FILE_WRITER"
        createdTime: 2021-12-31T20:30:57.920Z
        id: "12345"
        messagingServiceId: 67890x23vh
        type: type
        status: FAILED
    MessagingServiceScanData:
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        id:
          type: string
          description: Primary key set by the server.
          readOnly: true
          example: "12345"
        scanId:
          type: string
          description: The ID of the scan.
          readOnly: true
          example: 67890x23vh
        dataCollectionType:
          type: string
          description: The type of dataCollection this object holds scan data for.
          readOnly: true
          example: SOLACE_QUEUE
        data:
          type: string
          description: The scan data in JSON format.
          readOnly: true
          example: "{\"name\":\"some solace queue name\"}"
        type:
          type: string
          readOnly: true
      example:
        data: "{\"name\":\"some solace queue name\"}"
        scanId: 67890x23vh
        dataCollectionType: SOLACE_QUEUE
        createdTime: 2021-12-31T20:30:57.920Z
        id: "12345"
        type: type
    MessagingServiceScanDataListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MessagingServiceScanData'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - data: "{\"name\":\"some solace queue name\"}"
          scanId: 67890x23vh
          dataCollectionType: SOLACE_QUEUE
          createdTime: 2021-12-31T20:30:57.920Z
          id: "12345"
          type: type
        - data: "{\"name\":\"some solace queue name\"}"
          scanId: 67890x23vh
          dataCollectionType: SOLACE_QUEUE
          createdTime: 2021-12-31T20:30:57.920Z
          id: "12345"
          type: type
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    MessagingServiceScanDataResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/MessagingServiceScanData'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          data: "{\"name\":\"some solace queue name\"}"
          scanId: 67890x23vh
          dataCollectionType: SOLACE_QUEUE
          createdTime: 2021-12-31T20:30:57.920Z
          id: "12345"
          type: type
        meta:
          key: {}
    MessagingServiceScanLog:
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        id:
          type: string
          description: Primary key set by the server.
          readOnly: true
          example: "12345"
        scanId:
          type: string
          description: The ID of the scan.
          readOnly: true
          example: 67890x23vh
        log:
          type: string
          description: The log message.
          readOnly: true
          example: The Scan Is Done.
        logLevel:
          type: string
          description: The level of the log message.
          readOnly: true
          example: INFO
        type:
          type: string
          readOnly: true
      example:
        logLevel: INFO
        log: The Scan Is Done.
        scanId: 67890x23vh
        createdTime: 2021-12-31T20:30:57.920Z
        id: "12345"
        type: type
    MessagingServiceScanLogListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MessagingServiceScanLog'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - logLevel: INFO
          log: The Scan Is Done.
          scanId: 67890x23vh
          createdTime: 2021-12-31T20:30:57.920Z
          id: "12345"
          type: type
        - logLevel: INFO
          log: The Scan Is Done.
          scanId: 67890x23vh
          createdTime: 2021-12-31T20:30:57.920Z
          id: "12345"
          type: type
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    MessagingServiceScanResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/MessagingServiceScan'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          scanTypes: KAFKA_ALL
          updatedTime: 2021-12-31T20:30:57.920Z
          statusDescription: Scan failed because some scanTypes failed to complete.
          messagingServiceName: first solace messagingService
          createdBy: "12345678"
          changedBy: "12345678"
          destinations: "EVENT_PORTAL,FILE_WRITER"
          createdTime: 2021-12-31T20:30:57.920Z
          id: "12345"
          messagingServiceId: 67890x23vh
          type: type
          status: FAILED
        meta:
          key: {}
    MessagingServiceScansResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MessagingServiceScan'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - scanTypes: KAFKA_ALL
          updatedTime: 2021-12-31T20:30:57.920Z
          statusDescription: Scan failed because some scanTypes failed to complete.
          messagingServiceName: first solace messagingService
          createdBy: "12345678"
          changedBy: "12345678"
          destinations: "EVENT_PORTAL,FILE_WRITER"
          createdTime: 2021-12-31T20:30:57.920Z
          id: "12345"
          messagingServiceId: 67890x23vh
          type: type
          status: FAILED
        - scanTypes: KAFKA_ALL
          updatedTime: 2021-12-31T20:30:57.920Z
          statusDescription: Scan failed because some scanTypes failed to complete.
          messagingServiceName: first solace messagingService
          createdBy: "12345678"
          changedBy: "12345678"
          destinations: "EVENT_PORTAL,FILE_WRITER"
          createdTime: 2021-12-31T20:30:57.920Z
          id: "12345"
          messagingServiceId: 67890x23vh
          type: type
          status: FAILED
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    MessagingServicesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MessagingService'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          messagingServiceConnections:
          - updatedTime: 2021-12-31T20:30:57.920Z
            bindings:
              msgVpn: myVPN
            messagingServiceId: sdkjhg21948
            type: type
            messagingServiceAuthentications:
            - updatedTime: 2021-12-31T20:30:57.920Z
              messagingServiceConnectionId: sdafgj23
              messagingServiceCredentials:
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              createdBy: "12345678"
              changedBy: "12345678"
              name: https auth details
              createdTime: 2021-12-31T20:30:57.920Z
              id: kjsfg32ds
              authenticationType: basicAuthentication
              type: type
              authenticationDetails:
                broker owner: Solace PE team
            - updatedTime: 2021-12-31T20:30:57.920Z
              messagingServiceConnectionId: sdafgj23
              messagingServiceCredentials:
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              createdBy: "12345678"
              changedBy: "12345678"
              name: https auth details
              createdTime: 2021-12-31T20:30:57.920Z
              id: kjsfg32ds
              authenticationType: basicAuthentication
              type: type
              authenticationDetails:
                broker owner: Solace PE team
            url: https://abcd.messaging.solace.cloud:943
            protocol: https
            createdBy: "12345678"
            changedBy: "12345678"
            name: my https connection
            createdTime: 2021-12-31T20:30:57.920Z
            protocolVersion: "2.0"
            id: 5432dfg3
          - updatedTime: 2021-12-31T20:30:57.920Z
            bindings:
              msgVpn: myVPN
            messagingServiceId: sdkjhg21948
            type: type
            messagingServiceAuthentications:
            - updatedTime: 2021-12-31T20:30:57.920Z
              messagingServiceConnectionId: sdafgj23
              messagingServiceCredentials:
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              createdBy: "12345678"
              changedBy: "12345678"
              name: https auth details
              createdTime: 2021-12-31T20:30:57.920Z
              id: kjsfg32ds
              authenticationType: basicAuthentication
              type: type
              authenticationDetails:
                broker owner: Solace PE team
            - updatedTime: 2021-12-31T20:30:57.920Z
              messagingServiceConnectionId: sdafgj23
              messagingServiceCredentials:
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              createdBy: "12345678"
              changedBy: "12345678"
              name: https auth details
              createdTime: 2021-12-31T20:30:57.920Z
              id: kjsfg32ds
              authenticationType: basicAuthentication
              type: type
              authenticationDetails:
                broker owner: Solace PE team
            url: https://abcd.messaging.solace.cloud:943
            protocol: https
            createdBy: "12345678"
            changedBy: "12345678"
            name: my https connection
            createdTime: 2021-12-31T20:30:57.920Z
            protocolVersion: "2.0"
            id: 5432dfg3
          solaceCloudMessagingServiceId: abcd1234x
          type: type
          eventManagementAgentId: eventManagementAgentId
          eventMeshId: 67890x23vh
          createdBy: "12345678"
          changedBy: "12345678"
          messagingServiceType: solace
          runtimeAgentId: vh1234y14
          name: first messagingService
          createdTime: 2021-12-31T20:30:57.920Z
          id: asdkl234x
        - updatedTime: 2021-12-31T20:30:57.920Z
          messagingServiceConnections:
          - updatedTime: 2021-12-31T20:30:57.920Z
            bindings:
              msgVpn: myVPN
            messagingServiceId: sdkjhg21948
            type: type
            messagingServiceAuthentications:
            - updatedTime: 2021-12-31T20:30:57.920Z
              messagingServiceConnectionId: sdafgj23
              messagingServiceCredentials:
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              createdBy: "12345678"
              changedBy: "12345678"
              name: https auth details
              createdTime: 2021-12-31T20:30:57.920Z
              id: kjsfg32ds
              authenticationType: basicAuthentication
              type: type
              authenticationDetails:
                broker owner: Solace PE team
            - updatedTime: 2021-12-31T20:30:57.920Z
              messagingServiceConnectionId: sdafgj23
              messagingServiceCredentials:
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              createdBy: "12345678"
              changedBy: "12345678"
              name: https auth details
              createdTime: 2021-12-31T20:30:57.920Z
              id: kjsfg32ds
              authenticationType: basicAuthentication
              type: type
              authenticationDetails:
                broker owner: Solace PE team
            url: https://abcd.messaging.solace.cloud:943
            protocol: https
            createdBy: "12345678"
            changedBy: "12345678"
            name: my https connection
            createdTime: 2021-12-31T20:30:57.920Z
            protocolVersion: "2.0"
            id: 5432dfg3
          - updatedTime: 2021-12-31T20:30:57.920Z
            bindings:
              msgVpn: myVPN
            messagingServiceId: sdkjhg21948
            type: type
            messagingServiceAuthentications:
            - updatedTime: 2021-12-31T20:30:57.920Z
              messagingServiceConnectionId: sdafgj23
              messagingServiceCredentials:
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              createdBy: "12345678"
              changedBy: "12345678"
              name: https auth details
              createdTime: 2021-12-31T20:30:57.920Z
              id: kjsfg32ds
              authenticationType: basicAuthentication
              type: type
              authenticationDetails:
                broker owner: Solace PE team
            - updatedTime: 2021-12-31T20:30:57.920Z
              messagingServiceConnectionId: sdafgj23
              messagingServiceCredentials:
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              - updatedTime: 2021-12-31T20:30:57.920Z
                createdBy: "12345678"
                credentials:
                  username: User1
                  password: secretPass
                changedBy: "12345678"
                name: basic auth credentials
                createdTime: 2021-12-31T20:30:57.920Z
                id: lkjdsfgew2
                type: type
                messagingServiceAuthenticationId: sdafgj23
              createdBy: "12345678"
              changedBy: "12345678"
              name: https auth details
              createdTime: 2021-12-31T20:30:57.920Z
              id: kjsfg32ds
              authenticationType: basicAuthentication
              type: type
              authenticationDetails:
                broker owner: Solace PE team
            url: https://abcd.messaging.solace.cloud:943
            protocol: https
            createdBy: "12345678"
            changedBy: "12345678"
            name: my https connection
            createdTime: 2021-12-31T20:30:57.920Z
            protocolVersion: "2.0"
            id: 5432dfg3
          solaceCloudMessagingServiceId: abcd1234x
          type: type
          eventManagementAgentId: eventManagementAgentId
          eventMeshId: 67890x23vh
          createdBy: "12345678"
          changedBy: "12345678"
          messagingServiceType: solace
          runtimeAgentId: vh1234y14
          name: first messagingService
          createdTime: 2021-12-31T20:30:57.920Z
          id: asdkl234x
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    Pagination:
      type: object
      properties:
        pageNumber:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        nextPage:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
      example:
        pageNumber: 1
        nextPage: 2
        count: 5
        totalPages: 7
        pageSize: 5
    Plan:
      type: object
      properties:
        id:
          type: string
          description: ID value of the object
          readOnly: true
          example: "123456"
        name:
          type: string
          description: Title of the object
          example: Gold
        solaceClassOfServicePolicy:
          $ref: '#/components/schemas/SolaceClassOfServicePolicy'
        type:
          type: string
          description: The type of this payload
          readOnly: true
          default: plan
      example:
        name: Gold
        solaceClassOfServicePolicy: ""
        id: "123456"
        type: plan
    SchemaObject:
      required:
      - applicationDomainId
      - contentType
      - name
      - schemaType
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          readOnly: true
          example: "12345678"
        applicationDomainId:
          type: string
          example: "12345678"
        name:
          maxLength: 60
          type: string
          example: My First Schema
        shared:
          type: boolean
          example: false
        contentType:
          maxLength: 255
          type: string
          example: json
        schemaType:
          maxLength: 255
          type: string
          example: jsonSchema
        numberOfVersions:
          type: integer
          format: int32
          readOnly: true
        eventVersionRefCount:
          type: integer
          format: int32
          readOnly: true
        customAttributes:
          type: array
          items:
            $ref: '#/components/schemas/CustomAttribute'
        type:
          type: string
          readOnly: true
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        shared: false
        eventVersionRefCount: 6
        numberOfVersions: 0
        type: type
        applicationDomainId: "12345678"
        createdBy: "12345678"
        changedBy: "12345678"
        name: My First Schema
        schemaType: jsonSchema
        createdTime: 2021-12-31T20:30:57.920Z
        id: "12345678"
        contentType: json
        customAttributes:
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
    SchemaResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/SchemaObject'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          shared: false
          eventVersionRefCount: 6
          numberOfVersions: 0
          type: type
          applicationDomainId: "12345678"
          createdBy: "12345678"
          changedBy: "12345678"
          name: My First Schema
          schemaType: jsonSchema
          createdTime: 2021-12-31T20:30:57.920Z
          id: "12345678"
          contentType: json
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          key: {}
    SchemaVersion:
      required:
      - schemaId
      - version
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          readOnly: true
          example: "12345678"
        schemaId:
          type: string
          example: "12345678"
        description:
          maxLength: 10000
          type: string
          example: Schema created by Solace PubSub+ Cloud API documentation
        version:
          pattern: ^\d+\.\d+\.\d+$
          type: string
          example: 1.0.0
        displayName:
          maxLength: 40
          type: string
          example: Display name for the version
        content:
          type: string
          example: "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"\
            $id\": \"http://example.com/root.json\",\"type\": \"object\", \"title\"\
            : \"An example schema\", \"required\": [ \"attribute\", ], \"properties\"\
            : { \"attribute\": { \"$id\": \"#/properties/attribute\", \"type\": \"\
            string\", \"title\": \"An example of a string based attribute\", \"examples\"\
            : [ \"aValue\" ], \"pattern\": \"^(.*)$\" } }}"
        referencedByEventVersionIds:
          type: array
          readOnly: true
          items:
            type: string
            readOnly: true
            example: "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        customAttributes:
          type: array
          items:
            $ref: '#/components/schemas/CustomAttribute'
        stateId:
          type: string
          readOnly: true
          example: "1"
        type:
          type: string
          readOnly: true
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        referencedByEventVersionIds:
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        displayName: Display name for the version
        stateId: "1"
        description: Schema created by Solace PubSub+ Cloud API documentation
        type: type
        version: 1.0.0
        content: "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\"\
          : \"http://example.com/root.json\",\"type\": \"object\", \"title\": \"An\
          \ example schema\", \"required\": [ \"attribute\", ], \"properties\": {\
          \ \"attribute\": { \"$id\": \"#/properties/attribute\", \"type\": \"string\"\
          , \"title\": \"An example of a string based attribute\", \"examples\": [\
          \ \"aValue\" ], \"pattern\": \"^(.*)$\" } }}"
        createdBy: "12345678"
        changedBy: "12345678"
        schemaId: "12345678"
        createdTime: 2021-12-31T20:30:57.920Z
        id: "12345678"
        customAttributes:
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
    SchemaVersionResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/SchemaVersion'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          referencedByEventVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          displayName: Display name for the version
          stateId: "1"
          description: Schema created by Solace PubSub+ Cloud API documentation
          type: type
          version: 1.0.0
          content: "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"\
            $id\": \"http://example.com/root.json\",\"type\": \"object\", \"title\"\
            : \"An example schema\", \"required\": [ \"attribute\", ], \"properties\"\
            : { \"attribute\": { \"$id\": \"#/properties/attribute\", \"type\": \"\
            string\", \"title\": \"An example of a string based attribute\", \"examples\"\
            : [ \"aValue\" ], \"pattern\": \"^(.*)$\" } }}"
          createdBy: "12345678"
          changedBy: "12345678"
          schemaId: "12345678"
          createdTime: 2021-12-31T20:30:57.920Z
          id: "12345678"
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          key: {}
    SchemaVersionsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/SchemaVersion'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          referencedByEventVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          displayName: Display name for the version
          stateId: "1"
          description: Schema created by Solace PubSub+ Cloud API documentation
          type: type
          version: 1.0.0
          content: "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"\
            $id\": \"http://example.com/root.json\",\"type\": \"object\", \"title\"\
            : \"An example schema\", \"required\": [ \"attribute\", ], \"properties\"\
            : { \"attribute\": { \"$id\": \"#/properties/attribute\", \"type\": \"\
            string\", \"title\": \"An example of a string based attribute\", \"examples\"\
            : [ \"aValue\" ], \"pattern\": \"^(.*)$\" } }}"
          createdBy: "12345678"
          changedBy: "12345678"
          schemaId: "12345678"
          createdTime: 2021-12-31T20:30:57.920Z
          id: "12345678"
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        - updatedTime: 2021-12-31T20:30:57.920Z
          referencedByEventVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          displayName: Display name for the version
          stateId: "1"
          description: Schema created by Solace PubSub+ Cloud API documentation
          type: type
          version: 1.0.0
          content: "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"\
            $id\": \"http://example.com/root.json\",\"type\": \"object\", \"title\"\
            : \"An example schema\", \"required\": [ \"attribute\", ], \"properties\"\
            : { \"attribute\": { \"$id\": \"#/properties/attribute\", \"type\": \"\
            string\", \"title\": \"An example of a string based attribute\", \"examples\"\
            : [ \"aValue\" ], \"pattern\": \"^(.*)$\" } }}"
          createdBy: "12345678"
          changedBy: "12345678"
          schemaId: "12345678"
          createdTime: 2021-12-31T20:30:57.920Z
          id: "12345678"
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    SchemasResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/SchemaObject'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          shared: false
          eventVersionRefCount: 6
          numberOfVersions: 0
          type: type
          applicationDomainId: "12345678"
          createdBy: "12345678"
          changedBy: "12345678"
          name: My First Schema
          schemaType: jsonSchema
          createdTime: 2021-12-31T20:30:57.920Z
          id: "12345678"
          contentType: json
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        - updatedTime: 2021-12-31T20:30:57.920Z
          shared: false
          eventVersionRefCount: 6
          numberOfVersions: 0
          type: type
          applicationDomainId: "12345678"
          createdBy: "12345678"
          changedBy: "12345678"
          name: My First Schema
          schemaType: jsonSchema
          createdTime: 2021-12-31T20:30:57.920Z
          id: "12345678"
          contentType: json
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    SolaceClassOfServicePolicy:
      type: object
      description: Solace class of service policy
      allOf:
      - $ref: '#/components/schemas/BasePolicyDTO'
      - type: object
        properties:
          messageDeliveryMode:
            type: string
            description: "The mode that will be used for message delivery (ex: `guaranteed`\
              \ uses a queue)"
            enum:
            - direct
            - guaranteed
            - direct
            - guaranteed
            default: direct
          accessType:
            type: string
            enum:
            - exclusive
            - non-exclusive
          maximumTimeToLive:
            type: integer
            description: Duration in seconds of how long a message can live in a queue
            format: int32
            example: 1500
          queueType:
            type: string
            description: "The arrangement of queues on a broker used for message delivery\
              \ (ex: `single` uses one queue per event API version in this event API\
              \ product)"
            enum:
            - single
            - combined
            - single
            - combined
            default: combined
          maxMsgSpoolUsage:
            type: integer
            description: Total number of MBs available for the queue to use
            format: int32
            example: 5
          type:
            type: string
            description: The type of payload
            readOnly: true
            default: solaceClassOfServicePolicy
    SolaceMessagingService:
      type: object
      description: Solace Messaging Services
      allOf:
      - $ref: '#/components/schemas/BaseMessagingServiceDTO'
      - type: object
        properties:
          solaceCloudMessagingServiceId:
            type: string
            example: service123
          type:
            type: string
            description: The type of payload
            readOnly: true
            default: solaceManagedMessagingService
    StateChangeRequestResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/VersionedObjectStateChangeRequest'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          stateId: "1"
        meta:
          key: {}
    StateDTO:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        name:
          type: string
        stateOrder:
          type: integer
          format: int32
        type:
          type: string
      example:
        stateOrder: 0
        name: name
        description: description
        id: id
        type: type
    StatesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/StateDTO'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
        - stateOrder: 0
          name: name
          description: description
          id: id
          type: type
        - stateOrder: 0
          name: name
          description: description
          id: id
          type: type
        meta:
          key: {}
    Subscription:
      type: object
      properties:
        subscriptionType:
          type: string
          example: topic
        value:
          type: string
          example: solace/cloud
        attractedEventVersionIds:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/AttractedEventVersionTuple'
      example:
        subscriptionType: topic
        attractedEventVersionIds:
        - eventVersionId: eventVersionId
          eventMeshIds:
          - eventMeshIds
          - eventMeshIds
        - eventVersionId: eventVersionId
          eventMeshIds:
          - eventMeshIds
          - eventMeshIds
        value: solace/cloud
    TopicAddressEnum:
      required:
      - applicationDomainId
      - name
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          readOnly: true
          example: xyz23mwec2g
        applicationDomainId:
          type: string
          example: "12345678"
        name:
          maxLength: 60
          type: string
          example: My First Enum
        shared:
          type: boolean
          example: false
        numberOfVersions:
          type: integer
          format: int32
          readOnly: true
        eventVersionRefCount:
          type: integer
          format: int32
          readOnly: true
        customAttributes:
          type: array
          items:
            $ref: '#/components/schemas/CustomAttribute'
        type:
          type: string
          readOnly: true
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        shared: false
        applicationDomainId: "12345678"
        eventVersionRefCount: 6
        createdBy: "12345678"
        changedBy: "12345678"
        name: My First Enum
        createdTime: 2021-12-31T20:30:57.920Z
        numberOfVersions: 0
        id: xyz23mwec2g
        type: type
        customAttributes:
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
    TopicAddressEnumResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/TopicAddressEnum'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          shared: false
          applicationDomainId: "12345678"
          eventVersionRefCount: 6
          createdBy: "12345678"
          changedBy: "12345678"
          name: My First Enum
          createdTime: 2021-12-31T20:30:57.920Z
          numberOfVersions: 0
          id: xyz23mwec2g
          type: type
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          key: {}
    TopicAddressEnumValue:
      required:
      - value
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          readOnly: true
          example: xyz23mwec2g
        enumVersionId:
          type: string
          example: xyz23mwec2g
        value:
          maxLength: 255
          type: string
          example: Ontario
        label:
          maxLength: 40
          type: string
          example: Display name for the value
        type:
          type: string
          readOnly: true
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        createdBy: "12345678"
        changedBy: "12345678"
        enumVersionId: xyz23mwec2g
        createdTime: 2021-12-31T20:30:57.920Z
        id: xyz23mwec2g
        label: Display name for the value
        type: type
        value: Ontario
    TopicAddressEnumVersion:
      required:
      - enumId
      - values
      - version
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          readOnly: true
          example: xyz23mwec2g
        enumId:
          type: string
          example: xyz23mwec2g
        description:
          maxLength: 10000
          type: string
          example: Enum created by Solace PubSub+ Cloud API documentation
        version:
          type: string
          example: 1.0.0
        displayName:
          maxLength: 40
          type: string
          example: Display name for the version
        values:
          type: array
          items:
            $ref: '#/components/schemas/TopicAddressEnumValue'
        referencedByEventVersionIds:
          type: array
          readOnly: true
          items:
            type: string
            readOnly: true
            example: "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        referencedByTopicDomainIds:
          type: array
          readOnly: true
          items:
            type: string
            readOnly: true
            example: "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        stateId:
          type: string
          readOnly: true
          example: "1"
        customAttributes:
          type: array
          items:
            $ref: '#/components/schemas/CustomAttribute'
        type:
          type: string
          readOnly: true
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        enumId: xyz23mwec2g
        referencedByEventVersionIds:
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        displayName: Display name for the version
        values:
        - updatedTime: 2021-12-31T20:30:57.920Z
          createdBy: "12345678"
          changedBy: "12345678"
          enumVersionId: xyz23mwec2g
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          label: Display name for the value
          type: type
          value: Ontario
        - updatedTime: 2021-12-31T20:30:57.920Z
          createdBy: "12345678"
          changedBy: "12345678"
          enumVersionId: xyz23mwec2g
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          label: Display name for the value
          type: type
          value: Ontario
        stateId: "1"
        description: Enum created by Solace PubSub+ Cloud API documentation
        type: type
        version: 1.0.0
        createdBy: "12345678"
        changedBy: "12345678"
        referencedByTopicDomainIds:
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
        createdTime: 2021-12-31T20:30:57.920Z
        id: xyz23mwec2g
        customAttributes:
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
        - customAttributeDefinitionName: color
          customAttributeDefinitionId: acb2j5k3mly
          value: red
    TopicAddressEnumVersionResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/TopicAddressEnumVersion'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          enumId: xyz23mwec2g
          referencedByEventVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          displayName: Display name for the version
          values:
          - updatedTime: 2021-12-31T20:30:57.920Z
            createdBy: "12345678"
            changedBy: "12345678"
            enumVersionId: xyz23mwec2g
            createdTime: 2021-12-31T20:30:57.920Z
            id: xyz23mwec2g
            label: Display name for the value
            type: type
            value: Ontario
          - updatedTime: 2021-12-31T20:30:57.920Z
            createdBy: "12345678"
            changedBy: "12345678"
            enumVersionId: xyz23mwec2g
            createdTime: 2021-12-31T20:30:57.920Z
            id: xyz23mwec2g
            label: Display name for the value
            type: type
            value: Ontario
          stateId: "1"
          description: Enum created by Solace PubSub+ Cloud API documentation
          type: type
          version: 1.0.0
          createdBy: "12345678"
          changedBy: "12345678"
          referencedByTopicDomainIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          key: {}
    TopicAddressEnumVersionsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TopicAddressEnumVersion'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          enumId: xyz23mwec2g
          referencedByEventVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          displayName: Display name for the version
          values:
          - updatedTime: 2021-12-31T20:30:57.920Z
            createdBy: "12345678"
            changedBy: "12345678"
            enumVersionId: xyz23mwec2g
            createdTime: 2021-12-31T20:30:57.920Z
            id: xyz23mwec2g
            label: Display name for the value
            type: type
            value: Ontario
          - updatedTime: 2021-12-31T20:30:57.920Z
            createdBy: "12345678"
            changedBy: "12345678"
            enumVersionId: xyz23mwec2g
            createdTime: 2021-12-31T20:30:57.920Z
            id: xyz23mwec2g
            label: Display name for the value
            type: type
            value: Ontario
          stateId: "1"
          description: Enum created by Solace PubSub+ Cloud API documentation
          type: type
          version: 1.0.0
          createdBy: "12345678"
          changedBy: "12345678"
          referencedByTopicDomainIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        - updatedTime: 2021-12-31T20:30:57.920Z
          enumId: xyz23mwec2g
          referencedByEventVersionIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          displayName: Display name for the version
          values:
          - updatedTime: 2021-12-31T20:30:57.920Z
            createdBy: "12345678"
            changedBy: "12345678"
            enumVersionId: xyz23mwec2g
            createdTime: 2021-12-31T20:30:57.920Z
            id: xyz23mwec2g
            label: Display name for the value
            type: type
            value: Ontario
          - updatedTime: 2021-12-31T20:30:57.920Z
            createdBy: "12345678"
            changedBy: "12345678"
            enumVersionId: xyz23mwec2g
            createdTime: 2021-12-31T20:30:57.920Z
            id: xyz23mwec2g
            label: Display name for the value
            type: type
            value: Ontario
          stateId: "1"
          description: Enum created by Solace PubSub+ Cloud API documentation
          type: type
          version: 1.0.0
          createdBy: "12345678"
          changedBy: "12345678"
          referencedByTopicDomainIds:
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          - "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
          createdTime: 2021-12-31T20:30:57.920Z
          id: xyz23mwec2g
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    TopicAddressEnumsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TopicAddressEnum'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          shared: false
          applicationDomainId: "12345678"
          eventVersionRefCount: 6
          createdBy: "12345678"
          changedBy: "12345678"
          name: My First Enum
          createdTime: 2021-12-31T20:30:57.920Z
          numberOfVersions: 0
          id: xyz23mwec2g
          type: type
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        - updatedTime: 2021-12-31T20:30:57.920Z
          shared: false
          applicationDomainId: "12345678"
          eventVersionRefCount: 6
          createdBy: "12345678"
          changedBy: "12345678"
          name: My First Enum
          createdTime: 2021-12-31T20:30:57.920Z
          numberOfVersions: 0
          id: xyz23mwec2g
          type: type
          customAttributes:
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
          - customAttributeDefinitionName: color
            customAttributeDefinitionId: acb2j5k3mly
            value: red
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    TopicDomain:
      required:
      - addressLevels
      - applicationDomainId
      - brokerType
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        id:
          type: string
          readOnly: true
          example: vck3mzyb2j5
        applicationDomainId:
          type: string
          example: acb2j5k3mly
        brokerType:
          type: string
          example: solace
        addressLevels:
          type: array
          items:
            $ref: '#/components/schemas/AddressLevel'
        type:
          type: string
          readOnly: true
          example: topicDomain
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        applicationDomainId: acb2j5k3mly
        createdBy: "12345678"
        changedBy: "12345678"
        brokerType: solace
        createdTime: 2021-12-31T20:30:57.920Z
        id: vck3mzyb2j5
        type: topicDomain
        addressLevels:
        - enumVersionId: enumVersionId
          name: root
          addressLevelType: literal
        - enumVersionId: enumVersionId
          name: root
          addressLevelType: literal
    TopicDomainResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/TopicDomain'
        meta:
          type: object
          additionalProperties:
            type: object
      example:
        data:
          updatedTime: 2021-12-31T20:30:57.920Z
          applicationDomainId: acb2j5k3mly
          createdBy: "12345678"
          changedBy: "12345678"
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          id: vck3mzyb2j5
          type: topicDomain
          addressLevels:
          - enumVersionId: enumVersionId
            name: root
            addressLevelType: literal
          - enumVersionId: enumVersionId
            name: root
            addressLevelType: literal
        meta:
          key: {}
    TopicDomainsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TopicDomain'
        meta:
          $ref: '#/components/schemas/meta'
      example:
        data:
        - updatedTime: 2021-12-31T20:30:57.920Z
          applicationDomainId: acb2j5k3mly
          createdBy: "12345678"
          changedBy: "12345678"
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          id: vck3mzyb2j5
          type: topicDomain
          addressLevels:
          - enumVersionId: enumVersionId
            name: root
            addressLevelType: literal
          - enumVersionId: enumVersionId
            name: root
            addressLevelType: literal
        - updatedTime: 2021-12-31T20:30:57.920Z
          applicationDomainId: acb2j5k3mly
          createdBy: "12345678"
          changedBy: "12345678"
          brokerType: solace
          createdTime: 2021-12-31T20:30:57.920Z
          id: vck3mzyb2j5
          type: topicDomain
          addressLevels:
          - enumVersionId: enumVersionId
            name: root
            addressLevelType: literal
          - enumVersionId: enumVersionId
            name: root
            addressLevelType: literal
        meta:
          pagination:
            pageNumber: 1
            nextPage: 2
            count: 5
            totalPages: 7
            pageSize: 5
    TopicFilter:
      required:
      - eventVersionIds
      type: object
      properties:
        createdTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        updatedTime:
          type: string
          readOnly: true
          example: 2021-12-31T20:30:57.920Z
        createdBy:
          type: string
          readOnly: true
          example: "12345678"
        changedBy:
          type: string
          readOnly: true
          example: "12345678"
        name:
          type: string
          description: name of address node
          example: name
        filterValue:
          type: string
          description: Different filter values separated by comma
          example: " Tes?, TEST*FILTER, SAmPle"
        eventVersionIds:
          uniqueItems: true
          type: array
          items:
            type: string
        type:
          type: string
          description: The type of payload
          readOnly: true
          default: topicFilter
      description: List of variable that contains address node name and filters
      example:
        updatedTime: 2021-12-31T20:30:57.920Z
        filterValue: " Tes?, TEST*FILTER, SAmPle"
        eventVersionIds:
        - eventVersionIds
        - eventVersionIds
        createdBy: "12345678"
        changedBy: "12345678"
        name: name
        createdTime: 2021-12-31T20:30:57.920Z
        type: topicFilter
    VersionedObjectStateChangeRequest:
      type: object
      properties:
        stateId:
          type: string
          example: "1"
      example:
        stateId: "1"
    meta:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
      example:
        pagination:
          pageNumber: 1
          nextPage: 2
          count: 5
          totalPages: 7
          pageSize: 5
    inline_response_400:
      oneOf:
      - $ref: '#/components/schemas/ErrorResponse'
      - $ref: '#/components/schemas/InvalidStateReference'
  securitySchemes:
    APIToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
